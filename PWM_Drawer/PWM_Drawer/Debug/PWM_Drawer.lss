
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001c08  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080008e  0080008e  00001cca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fd6  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b26  00000000  00000000  00003f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185f  00000000  00000000  00004a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  000062d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c61  00000000  00000000  00006a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002119  00000000  00000000  000076d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  000097f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_4>
      14:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_5>
      18:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_6>
      1c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_7>
      20:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_8>
      24:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_9>
      28:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_10>
      2c:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_11>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      54:	c3 04       	cpc	r12, r3
      56:	46 05       	cpc	r20, r6
      58:	46 05       	cpc	r20, r6
      5a:	46 05       	cpc	r20, r6
      5c:	46 05       	cpc	r20, r6
      5e:	a2 04       	cpc	r10, r2
      60:	46 05       	cpc	r20, r6
      62:	46 05       	cpc	r20, r6
      64:	46 05       	cpc	r20, r6
      66:	46 05       	cpc	r20, r6
      68:	46 05       	cpc	r20, r6
      6a:	46 05       	cpc	r20, r6
      6c:	46 05       	cpc	r20, r6
      6e:	ce 04       	cpc	r12, r14
      70:	b8 04       	cpc	r11, r8
      72:	46 05       	cpc	r20, r6
      74:	d9 04       	cpc	r13, r9
      76:	e4 04       	cpc	r14, r4
      78:	ef 04       	cpc	r14, r15
      7a:	fa 04       	cpc	r15, r10
      7c:	05 05       	cpc	r16, r5
      7e:	10 05       	cpc	r17, r0
      80:	1b 05       	cpc	r17, r11
      82:	26 05       	cpc	r18, r6
      84:	31 05       	cpc	r19, r1
      86:	3c 05       	cpc	r19, r12
      88:	46 05       	cpc	r20, r6
      8a:	46 05       	cpc	r20, r6
      8c:	46 05       	cpc	r20, r6
      8e:	ad 04       	cpc	r10, r13
      90:	46 05       	cpc	r20, r6
      92:	46 05       	cpc	r20, r6
      94:	46 05       	cpc	r20, r6
      96:	e7 03       	fmuls	r22, r23
      98:	46 05       	cpc	r20, r6
      9a:	34 04       	cpc	r3, r4
      9c:	4a 04       	cpc	r4, r10
      9e:	08 04       	cpc	r0, r8
      a0:	f2 03       	fmuls	r23, r18
      a2:	46 05       	cpc	r20, r6
      a4:	6b 04       	cpc	r6, r11
      a6:	97 04       	cpc	r9, r7
      a8:	46 05       	cpc	r20, r6
      aa:	60 04       	cpc	r6, r0
      ac:	46 05       	cpc	r20, r6
      ae:	81 04       	cpc	r8, r1
      b0:	29 04       	cpc	r2, r9
      b2:	46 05       	cpc	r20, r6
      b4:	46 05       	cpc	r20, r6
      b6:	13 04       	cpc	r1, r3
      b8:	fd 03       	fmulsu	r23, r21
      ba:	8c 04       	cpc	r8, r12
      bc:	55 04       	cpc	r5, r5
      be:	1e 04       	cpc	r1, r14
      c0:	46 05       	cpc	r20, r6
      c2:	46 05       	cpc	r20, r6
      c4:	46 05       	cpc	r20, r6
      c6:	3f 04       	cpc	r3, r15
      c8:	76 04       	cpc	r7, r6
      ca:	46 05       	cpc	r20, r6
      cc:	46 05       	cpc	r20, r6
      ce:	46 05       	cpc	r20, r6
      d0:	46 05       	cpc	r20, r6
      d2:	46 05       	cpc	r20, r6
      d4:	46 05       	cpc	r20, r6
      d6:	e7 03       	fmuls	r22, r23
      d8:	46 05       	cpc	r20, r6
      da:	34 04       	cpc	r3, r4
      dc:	4a 04       	cpc	r4, r10
      de:	08 04       	cpc	r0, r8
      e0:	f2 03       	fmuls	r23, r18
      e2:	46 05       	cpc	r20, r6
      e4:	6b 04       	cpc	r6, r11
      e6:	97 04       	cpc	r9, r7
      e8:	46 05       	cpc	r20, r6
      ea:	60 04       	cpc	r6, r0
      ec:	46 05       	cpc	r20, r6
      ee:	81 04       	cpc	r8, r1
      f0:	29 04       	cpc	r2, r9
      f2:	46 05       	cpc	r20, r6
      f4:	46 05       	cpc	r20, r6
      f6:	13 04       	cpc	r1, r3
      f8:	fd 03       	fmulsu	r23, r21
      fa:	8c 04       	cpc	r8, r12
      fc:	55 04       	cpc	r5, r5
      fe:	1e 04       	cpc	r1, r14
     100:	46 05       	cpc	r20, r6
     102:	46 05       	cpc	r20, r6
     104:	46 05       	cpc	r20, r6
     106:	3f 04       	cpc	r3, r15
     108:	76 04       	cpc	r7, r6
     10a:	de 09       	sbc	r29, r14
     10c:	0e 0a       	sbc	r0, r30
     10e:	0e 0a       	sbc	r0, r30
     110:	0e 0a       	sbc	r0, r30
     112:	0e 0a       	sbc	r0, r30
     114:	0e 0a       	sbc	r0, r30
     116:	0e 0a       	sbc	r0, r30
     118:	0e 0a       	sbc	r0, r30
     11a:	0e 0a       	sbc	r0, r30
     11c:	0e 0a       	sbc	r0, r30
     11e:	e4 09       	sbc	r30, r4
     120:	0e 0a       	sbc	r0, r30
     122:	0e 0a       	sbc	r0, r30
     124:	0e 0a       	sbc	r0, r30
     126:	0e 0a       	sbc	r0, r30
     128:	0e 0a       	sbc	r0, r30
     12a:	0e 0a       	sbc	r0, r30
     12c:	0e 0a       	sbc	r0, r30
     12e:	0e 0a       	sbc	r0, r30
     130:	0e 0a       	sbc	r0, r30
     132:	ea 09       	sbc	r30, r10
     134:	0e 0a       	sbc	r0, r30
     136:	0e 0a       	sbc	r0, r30
     138:	0e 0a       	sbc	r0, r30
     13a:	0e 0a       	sbc	r0, r30
     13c:	0e 0a       	sbc	r0, r30
     13e:	0e 0a       	sbc	r0, r30
     140:	0e 0a       	sbc	r0, r30
     142:	0e 0a       	sbc	r0, r30
     144:	0e 0a       	sbc	r0, r30
     146:	f0 09       	sbc	r31, r0
     148:	0e 0a       	sbc	r0, r30
     14a:	0e 0a       	sbc	r0, r30
     14c:	0e 0a       	sbc	r0, r30
     14e:	0e 0a       	sbc	r0, r30
     150:	0e 0a       	sbc	r0, r30
     152:	0e 0a       	sbc	r0, r30
     154:	0e 0a       	sbc	r0, r30
     156:	0e 0a       	sbc	r0, r30
     158:	0e 0a       	sbc	r0, r30
     15a:	f6 09       	sbc	r31, r6
     15c:	0e 0a       	sbc	r0, r30
     15e:	0e 0a       	sbc	r0, r30
     160:	0e 0a       	sbc	r0, r30
     162:	0e 0a       	sbc	r0, r30
     164:	0e 0a       	sbc	r0, r30
     166:	0e 0a       	sbc	r0, r30
     168:	0e 0a       	sbc	r0, r30
     16a:	0e 0a       	sbc	r0, r30
     16c:	0e 0a       	sbc	r0, r30
     16e:	fc 09       	sbc	r31, r12
     170:	0e 0a       	sbc	r0, r30
     172:	0e 0a       	sbc	r0, r30
     174:	0e 0a       	sbc	r0, r30
     176:	0e 0a       	sbc	r0, r30
     178:	0e 0a       	sbc	r0, r30
     17a:	0e 0a       	sbc	r0, r30
     17c:	0e 0a       	sbc	r0, r30
     17e:	0e 0a       	sbc	r0, r30
     180:	0e 0a       	sbc	r0, r30
     182:	02 0a       	sbc	r0, r18
     184:	0e 0a       	sbc	r0, r30
     186:	0e 0a       	sbc	r0, r30
     188:	0e 0a       	sbc	r0, r30
     18a:	0e 0a       	sbc	r0, r30
     18c:	0e 0a       	sbc	r0, r30
     18e:	0e 0a       	sbc	r0, r30
     190:	0e 0a       	sbc	r0, r30
     192:	0e 0a       	sbc	r0, r30
     194:	0e 0a       	sbc	r0, r30
     196:	08 0a       	sbc	r0, r24

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf e5       	ldi	r28, 0x5F	; 95
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
     1a4:	10 e0       	ldi	r17, 0x00	; 0
     1a6:	a0 e6       	ldi	r26, 0x60	; 96
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e8 e0       	ldi	r30, 0x08	; 8
     1ac:	fc e1       	ldi	r31, 0x1C	; 28
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
     1b0:	05 90       	lpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	ae 38       	cpi	r26, 0x8E	; 142
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	ae e8       	ldi	r26, 0x8E	; 142
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a7 3b       	cpi	r26, 0xB7	; 183
     1c6:	b2 07       	cpc	r27, r18
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
     1ce:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <PWMDrawer_VoidDrawSignal>:
/* PWM_Drawer.h */
#include "PWMDrawer_Private.h"
#include "PWMDrawer_Interface.h"

 void PWMDrawer_VoidDrawSignal(f32 copy_f32Duty, f32 copy_f32Frequency, f32 copy_f32Periodic_Time, f32 copy_f32High_Time, f32 copy_f32Low_Time)
 {	
     1d6:	6f 92       	push	r6
     1d8:	7f 92       	push	r7
     1da:	8f 92       	push	r8
     1dc:	9f 92       	push	r9
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	cc 54       	subi	r28, 0x4C	; 76
     1f8:	d1 09       	sbc	r29, r1
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	29 96       	adiw	r28, 0x09	; 9
     206:	6c af       	std	Y+60, r22	; 0x3c
     208:	7d af       	std	Y+61, r23	; 0x3d
     20a:	8e af       	std	Y+62, r24	; 0x3e
     20c:	9f af       	std	Y+63, r25	; 0x3f
     20e:	29 97       	sbiw	r28, 0x09	; 9
     210:	25 96       	adiw	r28, 0x05	; 5
     212:	2c af       	std	Y+60, r18	; 0x3c
     214:	3d af       	std	Y+61, r19	; 0x3d
     216:	4e af       	std	Y+62, r20	; 0x3e
     218:	5f af       	std	Y+63, r21	; 0x3f
     21a:	25 97       	sbiw	r28, 0x05	; 5
     21c:	2d 96       	adiw	r28, 0x0d	; 13
     21e:	ec ae       	std	Y+60, r14	; 0x3c
     220:	fd ae       	std	Y+61, r15	; 0x3d
     222:	0e af       	std	Y+62, r16	; 0x3e
     224:	1f af       	std	Y+63, r17	; 0x3f
     226:	2d 97       	sbiw	r28, 0x0d	; 13
     228:	21 96       	adiw	r28, 0x01	; 1
     22a:	ac ae       	std	Y+60, r10	; 0x3c
     22c:	bd ae       	std	Y+61, r11	; 0x3d
     22e:	ce ae       	std	Y+62, r12	; 0x3e
     230:	df ae       	std	Y+63, r13	; 0x3f
     232:	21 97       	sbiw	r28, 0x01	; 1
	 u16 local_u16Scale = 0;
	 
	 if ((u16)copy_f32Frequency < 1)
     234:	ca 01       	movw	r24, r20
     236:	b9 01       	movw	r22, r18
     238:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     23c:	61 15       	cp	r22, r1
     23e:	71 05       	cpc	r23, r1
     240:	81 f0       	breq	.+32     	; 0x262 <PWMDrawer_VoidDrawSignal+0x8c>
	 {
		 local_u16Scale = 1;
	 }
	else if ((u16)copy_f32Frequency < 10)
     242:	6a 30       	cpi	r22, 0x0A	; 10
     244:	71 05       	cpc	r23, r1
     246:	88 f0       	brcs	.+34     	; 0x26a <PWMDrawer_VoidDrawSignal+0x94>
	{
		local_u16Scale = 10;
	}
	 else if ((u16)copy_f32Frequency < 100)
     248:	64 36       	cpi	r22, 0x64	; 100
     24a:	71 05       	cpc	r23, r1
     24c:	a0 f0       	brcs	.+40     	; 0x276 <PWMDrawer_VoidDrawSignal+0xa0>
	 {
		local_u16Scale = 100;
	 }
	 else if ((u16)copy_f32Frequency < 1000)
     24e:	68 3e       	cpi	r22, 0xE8	; 232
     250:	73 40       	sbci	r23, 0x03	; 3
     252:	b8 f4       	brcc	.+46     	; 0x282 <PWMDrawer_VoidDrawSignal+0xac>
	 {
		 local_u16Scale = 1000;
     254:	0f 2e       	mov	r0, r31
     256:	f8 ee       	ldi	r31, 0xE8	; 232
     258:	6f 2e       	mov	r6, r31
     25a:	f3 e0       	ldi	r31, 0x03	; 3
     25c:	7f 2e       	mov	r7, r31
     25e:	f0 2d       	mov	r31, r0
     260:	16 c0       	rjmp	.+44     	; 0x28e <PWMDrawer_VoidDrawSignal+0xb8>
 {	
	 u16 local_u16Scale = 0;
	 
	 if ((u16)copy_f32Frequency < 1)
	 {
		 local_u16Scale = 1;
     262:	66 24       	eor	r6, r6
     264:	63 94       	inc	r6
     266:	71 2c       	mov	r7, r1
     268:	12 c0       	rjmp	.+36     	; 0x28e <PWMDrawer_VoidDrawSignal+0xb8>
	 }
	else if ((u16)copy_f32Frequency < 10)
	{
		local_u16Scale = 10;
     26a:	0f 2e       	mov	r0, r31
     26c:	fa e0       	ldi	r31, 0x0A	; 10
     26e:	6f 2e       	mov	r6, r31
     270:	71 2c       	mov	r7, r1
     272:	f0 2d       	mov	r31, r0
     274:	0c c0       	rjmp	.+24     	; 0x28e <PWMDrawer_VoidDrawSignal+0xb8>
	}
	 else if ((u16)copy_f32Frequency < 100)
	 {
		local_u16Scale = 100;
     276:	0f 2e       	mov	r0, r31
     278:	f4 e6       	ldi	r31, 0x64	; 100
     27a:	6f 2e       	mov	r6, r31
     27c:	71 2c       	mov	r7, r1
     27e:	f0 2d       	mov	r31, r0
     280:	06 c0       	rjmp	.+12     	; 0x28e <PWMDrawer_VoidDrawSignal+0xb8>
	 {
		 local_u16Scale = 1000;
	 }
	 else
	 {
		 local_u16Scale = 10000;
     282:	0f 2e       	mov	r0, r31
     284:	f0 e1       	ldi	r31, 0x10	; 16
     286:	6f 2e       	mov	r6, r31
     288:	f7 e2       	ldi	r31, 0x27	; 39
     28a:	7f 2e       	mov	r7, r31
     28c:	f0 2d       	mov	r31, r0
	 }

	 u16 local_u16Counter = 0;
 	/* Display Signal Data (Frequency and Duty) Values */
 	GLCD_VoidGoToPos(0, 0);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GLCD_VoidGoToPos>
 	char txt1[15] = "Freq.=";
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	e0 e6       	ldi	r30, 0x60	; 96
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	de 01       	movw	r26, r28
     29e:	11 96       	adiw	r26, 0x01	; 1
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	8a 95       	dec	r24
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <PWMDrawer_VoidDrawSignal+0xca>
     2a8:	fe 01       	movw	r30, r28
     2aa:	38 96       	adiw	r30, 0x08	; 8
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	df 01       	movw	r26, r30
     2b0:	1d 92       	st	X+, r1
     2b2:	8a 95       	dec	r24
     2b4:	e9 f7       	brne	.-6      	; 0x2b0 <PWMDrawer_VoidDrawSignal+0xda>
 	GLCD_u8PrintString(txt1);
     2b6:	ce 01       	movw	r24, r28
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
 	GLCD_VoidDisplayFloatingPoint(copy_f32Frequency);
     2be:	25 96       	adiw	r28, 0x05	; 5
     2c0:	6c ad       	ldd	r22, Y+60	; 0x3c
     2c2:	7d ad       	ldd	r23, Y+61	; 0x3d
     2c4:	8e ad       	ldd	r24, Y+62	; 0x3e
     2c6:	9f ad       	ldd	r25, Y+63	; 0x3f
     2c8:	25 97       	sbiw	r28, 0x05	; 5
     2ca:	0e 94 d7 05 	call	0xbae	; 0xbae <GLCD_VoidDisplayFloatingPoint>
 	char txt2[5] = "Hz";
     2ce:	88 e4       	ldi	r24, 0x48	; 72
     2d0:	9a e7       	ldi	r25, 0x7A	; 122
     2d2:	99 8b       	std	Y+17, r25	; 0x11
     2d4:	88 8b       	std	Y+16, r24	; 0x10
     2d6:	1b 8a       	std	Y+19, r1	; 0x13
     2d8:	1a 8a       	std	Y+18, r1	; 0x12
     2da:	1c 8a       	std	Y+20, r1	; 0x14
 	GLCD_u8PrintString(txt2);
     2dc:	ce 01       	movw	r24, r28
     2de:	40 96       	adiw	r24, 0x10	; 16
     2e0:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
 
 	GLCD_VoidGoToPos(1, 0);
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GLCD_VoidGoToPos>
 	char txt3[15] = "Duty=";
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	ef e6       	ldi	r30, 0x6F	; 111
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	de 01       	movw	r26, r28
     2f4:	55 96       	adiw	r26, 0x15	; 21
     2f6:	01 90       	ld	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	8a 95       	dec	r24
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <PWMDrawer_VoidDrawSignal+0x120>
     2fe:	fe 01       	movw	r30, r28
     300:	7b 96       	adiw	r30, 0x1b	; 27
     302:	89 e0       	ldi	r24, 0x09	; 9
     304:	df 01       	movw	r26, r30
     306:	1d 92       	st	X+, r1
     308:	8a 95       	dec	r24
     30a:	e9 f7       	brne	.-6      	; 0x306 <PWMDrawer_VoidDrawSignal+0x130>
 	GLCD_u8PrintString(txt3);
     30c:	ce 01       	movw	r24, r28
     30e:	45 96       	adiw	r24, 0x15	; 21
     310:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
 	GLCD_VoidWriteNumber(copy_f32Duty);
     314:	29 96       	adiw	r28, 0x09	; 9
     316:	6c ad       	ldd	r22, Y+60	; 0x3c
     318:	7d ad       	ldd	r23, Y+61	; 0x3d
     31a:	8e ad       	ldd	r24, Y+62	; 0x3e
     31c:	9f ad       	ldd	r25, Y+63	; 0x3f
     31e:	29 97       	sbiw	r28, 0x09	; 9
     320:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     324:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <GLCD_VoidWriteNumber>
 	char txt4[5] = "%";
     328:	85 e2       	ldi	r24, 0x25	; 37
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9d a3       	std	Y+37, r25	; 0x25
     32e:	8c a3       	std	Y+36, r24	; 0x24
     330:	fe 01       	movw	r30, r28
     332:	b6 96       	adiw	r30, 0x26	; 38
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	df 01       	movw	r26, r30
     338:	1d 92       	st	X+, r1
     33a:	8a 95       	dec	r24
     33c:	e9 f7       	brne	.-6      	; 0x338 <PWMDrawer_VoidDrawSignal+0x162>
 	GLCD_u8PrintString(txt4);
     33e:	ce 01       	movw	r24, r28
     340:	84 96       	adiw	r24, 0x24	; 36
     342:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
 
 	/* Display Signal Shape */
 	GLCD_VoidGoToPos(6, 0);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GLCD_VoidGoToPos>
 	u8 pixel_width_count = 0;
     34e:	10 e0       	ldi	r17, 0x00	; 0
 	while (pixel_width_count < 120U)
     350:	5b c0       	rjmp	.+182    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	 {
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
     352:	20 e4       	ldi	r18, 0x40	; 64
     354:	30 e4       	ldi	r19, 0x40	; 64
     356:	4e e7       	ldi	r20, 0x7E	; 126
     358:	52 e0       	ldi	r21, 0x02	; 2
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     366:	1b 5f       	subi	r17, 0xFB	; 251
 		for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
     368:	81 2c       	mov	r8, r1
     36a:	91 2c       	mov	r9, r1
     36c:	0e c0       	rjmp	.+28     	; 0x38a <PWMDrawer_VoidDrawSignal+0x1b4>
		{
 			GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
     36e:	22 e0       	ldi	r18, 0x02	; 2
     370:	32 e0       	ldi	r19, 0x02	; 2
     372:	42 e0       	ldi	r20, 0x02	; 2
     374:	52 e0       	ldi	r21, 0x02	; 2
     376:	62 e0       	ldi	r22, 0x02	; 2
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     382:	1b 5f       	subi	r17, 0xFB	; 251
 	GLCD_VoidGoToPos(6, 0);
 	u8 pixel_width_count = 0;
 	while (pixel_width_count < 120U)
	 {
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
 		for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
     384:	bf ef       	ldi	r27, 0xFF	; 255
     386:	8b 1a       	sub	r8, r27
     388:	9b 0a       	sbc	r9, r27
     38a:	b3 01       	movw	r22, r6
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 83 0c 	call	0x1906	; 0x1906 <__floatunsisf>
     394:	6b 01       	movw	r12, r22
     396:	7c 01       	movw	r14, r24
     398:	21 96       	adiw	r28, 0x01	; 1
     39a:	2c ad       	ldd	r18, Y+60	; 0x3c
     39c:	3d ad       	ldd	r19, Y+61	; 0x3d
     39e:	4e ad       	ldd	r20, Y+62	; 0x3e
     3a0:	5f ad       	ldd	r21, Y+63	; 0x3f
     3a2:	21 97       	sbiw	r28, 0x01	; 1
     3a4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     3a8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     3ac:	86 16       	cp	r8, r22
     3ae:	97 06       	cpc	r9, r23
     3b0:	f0 f2       	brcs	.-68     	; 0x36e <PWMDrawer_VoidDrawSignal+0x198>
		{
 			GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
 		}
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
     3b2:	22 e0       	ldi	r18, 0x02	; 2
     3b4:	32 e0       	ldi	r19, 0x02	; 2
     3b6:	4e e7       	ldi	r20, 0x7E	; 126
     3b8:	50 e4       	ldi	r21, 0x40	; 64
     3ba:	60 e4       	ldi	r22, 0x40	; 64
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     3c6:	1b 5f       	subi	r17, 0xFB	; 251
 		for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32Low_Time*(f32)local_u16Scale)); local_u16Counter++)
     3c8:	81 2c       	mov	r8, r1
     3ca:	91 2c       	mov	r9, r1
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <PWMDrawer_VoidDrawSignal+0x214>
		{
 			GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
     3ce:	20 e4       	ldi	r18, 0x40	; 64
     3d0:	30 e4       	ldi	r19, 0x40	; 64
     3d2:	40 e4       	ldi	r20, 0x40	; 64
     3d4:	50 e4       	ldi	r21, 0x40	; 64
     3d6:	60 e4       	ldi	r22, 0x40	; 64
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     3e2:	1b 5f       	subi	r17, 0xFB	; 251
 		for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
		{
 			GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
 		}
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
 		for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32Low_Time*(f32)local_u16Scale)); local_u16Counter++)
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	88 1a       	sub	r8, r24
     3e8:	98 0a       	sbc	r9, r24
     3ea:	a1 96       	adiw	r28, 0x21	; 33
     3ec:	2c ad       	ldd	r18, Y+60	; 0x3c
     3ee:	3d ad       	ldd	r19, Y+61	; 0x3d
     3f0:	4e ad       	ldd	r20, Y+62	; 0x3e
     3f2:	5f ad       	ldd	r21, Y+63	; 0x3f
     3f4:	a1 97       	sbiw	r28, 0x21	; 33
     3f6:	c7 01       	movw	r24, r14
     3f8:	b6 01       	movw	r22, r12
     3fa:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     3fe:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     402:	86 16       	cp	r8, r22
     404:	97 06       	cpc	r9, r23
     406:	18 f3       	brcs	.-58     	; 0x3ce <PWMDrawer_VoidDrawSignal+0x1f8>
 	GLCD_u8PrintString(txt4);
 
 	/* Display Signal Shape */
 	GLCD_VoidGoToPos(6, 0);
 	u8 pixel_width_count = 0;
 	while (pixel_width_count < 120U)
     408:	18 37       	cpi	r17, 0x78	; 120
     40a:	08 f4       	brcc	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40c:	a2 cf       	rjmp	.-188    	; 0x352 <PWMDrawer_VoidDrawSignal+0x17c>
 			GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
 		}
 	}
	 
 	/* Display Arrow for Time Period */
 	GLCD_VoidGoToPos(5, 0);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GLCD_VoidGoToPos>
 	GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	3e e3       	ldi	r19, 0x3E	; 62
     41a:	48 e0       	ldi	r20, 0x08	; 8
     41c:	5c e1       	ldi	r21, 0x1C	; 28
     41e:	6a e2       	ldi	r22, 0x2A	; 42
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
 	for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
     42a:	e1 2c       	mov	r14, r1
     42c:	f1 2c       	mov	r15, r1
     42e:	0d c0       	rjmp	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	{
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     430:	28 e0       	ldi	r18, 0x08	; 8
     432:	38 e0       	ldi	r19, 0x08	; 8
     434:	48 e0       	ldi	r20, 0x08	; 8
     436:	58 e0       	ldi	r21, 0x08	; 8
     438:	68 e0       	ldi	r22, 0x08	; 8
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
 	}
	 
 	/* Display Arrow for Time Period */
 	GLCD_VoidGoToPos(5, 0);
 	GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
 	for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
     444:	af ef       	ldi	r26, 0xFF	; 255
     446:	ea 1a       	sub	r14, r26
     448:	fa 0a       	sbc	r15, r26
     44a:	b3 01       	movw	r22, r6
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 83 0c 	call	0x1906	; 0x1906 <__floatunsisf>
     454:	4b 01       	movw	r8, r22
     456:	5c 01       	movw	r10, r24
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
     45c:	21 96       	adiw	r28, 0x01	; 1
     45e:	6c ad       	ldd	r22, Y+60	; 0x3c
     460:	7d ad       	ldd	r23, Y+61	; 0x3d
     462:	8e ad       	ldd	r24, Y+62	; 0x3e
     464:	9f ad       	ldd	r25, Y+63	; 0x3f
     466:	21 97       	sbiw	r28, 0x01	; 1
     468:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     46c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     470:	e6 16       	cp	r14, r22
     472:	f7 06       	cpc	r15, r23
     474:	e8 f2       	brcs	.-70     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 	}
 	GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     476:	28 e0       	ldi	r18, 0x08	; 8
     478:	38 e0       	ldi	r19, 0x08	; 8
     47a:	48 e0       	ldi	r20, 0x08	; 8
     47c:	58 e0       	ldi	r21, 0x08	; 8
     47e:	68 e0       	ldi	r22, 0x08	; 8
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
 	for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32Low_Time*(f32)local_u16Scale)); local_u16Counter++)
     48a:	e1 2c       	mov	r14, r1
     48c:	f1 2c       	mov	r15, r1
     48e:	0d c0       	rjmp	.+26     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     490:	28 e0       	ldi	r18, 0x08	; 8
     492:	38 e0       	ldi	r19, 0x08	; 8
     494:	48 e0       	ldi	r20, 0x08	; 8
     496:	58 e0       	ldi	r21, 0x08	; 8
     498:	68 e0       	ldi	r22, 0x08	; 8
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
 	for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32High_Time*(f32)local_u16Scale)); local_u16Counter++)
	{
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 	}
 	GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 	for (local_u16Counter = 0; local_u16Counter < ((u16)(copy_f32Low_Time*(f32)local_u16Scale)); local_u16Counter++)
     4a4:	bf ef       	ldi	r27, 0xFF	; 255
     4a6:	eb 1a       	sub	r14, r27
     4a8:	fb 0a       	sbc	r15, r27
     4aa:	a5 01       	movw	r20, r10
     4ac:	94 01       	movw	r18, r8
     4ae:	a1 96       	adiw	r28, 0x21	; 33
     4b0:	6c ad       	ldd	r22, Y+60	; 0x3c
     4b2:	7d ad       	ldd	r23, Y+61	; 0x3d
     4b4:	8e ad       	ldd	r24, Y+62	; 0x3e
     4b6:	9f ad       	ldd	r25, Y+63	; 0x3f
     4b8:	a1 97       	sbiw	r28, 0x21	; 33
     4ba:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     4be:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     4c2:	e6 16       	cp	r14, r22
     4c4:	f7 06       	cpc	r15, r23
     4c6:	20 f3       	brcs	.-56     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	{
 		GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 	}
	GLCD_VoidDisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
     4c8:	2a e2       	ldi	r18, 0x2A	; 42
     4ca:	3c e1       	ldi	r19, 0x1C	; 28
     4cc:	48 e0       	ldi	r20, 0x08	; 8
     4ce:	5e e3       	ldi	r21, 0x3E	; 62
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
 
 	/* Display Time Period Value */
 	GLCD_VoidGoToPos(4, 0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <GLCD_VoidGoToPos>
 	char txt5[15] = "Time=";
     4e4:	86 e0       	ldi	r24, 0x06	; 6
     4e6:	ee e7       	ldi	r30, 0x7E	; 126
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	de 01       	movw	r26, r28
     4ec:	99 96       	adiw	r26, 0x29	; 41
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	8a 95       	dec	r24
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4f6:	fe 01       	movw	r30, r28
     4f8:	bf 96       	adiw	r30, 0x2f	; 47
     4fa:	89 e0       	ldi	r24, 0x09	; 9
     4fc:	df 01       	movw	r26, r30
     4fe:	1d 92       	st	X+, r1
     500:	8a 95       	dec	r24
     502:	e9 f7       	brne	.-6      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 	GLCD_u8PrintString(txt5);
     504:	ce 01       	movw	r24, r28
     506:	89 96       	adiw	r24, 0x29	; 41
     508:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
 	GLCD_VoidDisplayFloatingPoint(copy_f32Periodic_Time*(f32)local_u16Scale);
     50c:	2d 96       	adiw	r28, 0x0d	; 13
     50e:	2c ad       	ldd	r18, Y+60	; 0x3c
     510:	3d ad       	ldd	r19, Y+61	; 0x3d
     512:	4e ad       	ldd	r20, Y+62	; 0x3e
     514:	5f ad       	ldd	r21, Y+63	; 0x3f
     516:	2d 97       	sbiw	r28, 0x0d	; 13
     518:	c5 01       	movw	r24, r10
     51a:	b4 01       	movw	r22, r8
     51c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     520:	0e 94 d7 05 	call	0xbae	; 0xbae <GLCD_VoidDisplayFloatingPoint>
 	char txt6[5] = "ms";
     524:	8d e6       	ldi	r24, 0x6D	; 109
     526:	93 e7       	ldi	r25, 0x73	; 115
     528:	99 af       	std	Y+57, r25	; 0x39
     52a:	88 af       	std	Y+56, r24	; 0x38
     52c:	1b ae       	std	Y+59, r1	; 0x3b
     52e:	1a ae       	std	Y+58, r1	; 0x3a
     530:	1c ae       	std	Y+60, r1	; 0x3c
 	GLCD_u8PrintString(txt6);
     532:	ce 01       	movw	r24, r28
     534:	c8 96       	adiw	r24, 0x38	; 56
     536:	0e 94 64 05 	call	0xac8	; 0xac8 <GLCD_u8PrintString>
     53a:	c4 5b       	subi	r28, 0xB4	; 180
     53c:	df 4f       	sbci	r29, 0xFF	; 255
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	7f 90       	pop	r7
     562:	6f 90       	pop	r6
     564:	08 95       	ret

00000566 <static_GLCD_VoidSendEnablePulse>:
	}
	GLCD_VoidReset();
	GLCD_u8SelectPage(GLCD_PAGE_0);
	global_u8CurrPage = 0;
	GLCD_VoidGoToPos(0, 0);
}
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 af 09 	call	0x135e	; 0x135e <TIMER2_VoidDelayms>
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	62 e0       	ldi	r22, 0x02	; 2
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     582:	08 95       	ret

00000584 <GLCD_u8SendCommand>:
     584:	cf 93       	push	r28
     586:	c8 2f       	mov	r28, r24
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     59c:	6c 2f       	mov	r22, r28
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_u8SetPortValue>
     5a4:	0e 94 b3 02 	call	0x566	; 0x566 <static_GLCD_VoidSendEnablePulse>
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <GLCD_u8SelectPage>:
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	91 f0       	breq	.+36     	; 0x5d4 <GLCD_u8SelectPage+0x28>
     5b0:	28 f0       	brcs	.+10     	; 0x5bc <GLCD_u8SelectPage+0x10>
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	d9 f0       	breq	.+54     	; 0x5ec <GLCD_u8SelectPage+0x40>
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	29 f1       	breq	.+74     	; 0x604 <GLCD_u8SelectPage+0x58>
     5ba:	30 c0       	rjmp	.+96     	; 0x61c <GLCD_u8SelectPage+0x70>
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	66 e0       	ldi	r22, 0x06	; 6
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	67 e0       	ldi	r22, 0x07	; 7
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	66 e0       	ldi	r22, 0x06	; 6
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	67 e0       	ldi	r22, 0x07	; 7
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	66 e0       	ldi	r22, 0x06	; 6
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	67 e0       	ldi	r22, 0x07	; 7
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	66 e0       	ldi	r22, 0x06	; 6
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	67 e0       	ldi	r22, 0x07	; 7
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	08 95       	ret
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret

00000620 <GLCD_VoidInit>:
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	66 e0       	ldi	r22, 0x06	; 6
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	67 e0       	ldi	r22, 0x07	; 7
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
     65c:	6f ef       	ldi	r22, 0xFF	; 255
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_u8SetPortDirection>
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GLCD_u8SelectPage>
     674:	8e e3       	ldi	r24, 0x3E	; 62
     676:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     67a:	88 eb       	ldi	r24, 0xB8	; 184
     67c:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     680:	80 e4       	ldi	r24, 0x40	; 64
     682:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     68c:	8f e3       	ldi	r24, 0x3F	; 63
     68e:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GLCD_u8SelectPage>
     698:	08 95       	ret

0000069a <GLCD_VoidSendData>:
     69a:	cf 93       	push	r28
     69c:	c8 2f       	mov	r28, r24
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 43 07 	call	0xe86	; 0xe86 <DIO_u8SetPinValue>
     6b2:	6c 2f       	mov	r22, r28
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_u8SetPortValue>
     6ba:	0e 94 b3 02 	call	0x566	; 0x566 <static_GLCD_VoidSendEnablePulse>
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <GLCD_VoidGoToPos>:
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	88 f4       	brcc	.+34     	; 0x6ec <GLCD_VoidGoToPos+0x2a>
     6ca:	d6 2f       	mov	r29, r22
     6cc:	c8 2f       	mov	r28, r24
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GLCD_u8SelectPage>
     6d4:	c0 93 90 00 	sts	0x0090, r28	; 0x800090 <global_u8CurrXAddress>
     6d8:	88 eb       	ldi	r24, 0xB8	; 184
     6da:	8c 0f       	add	r24, r28
     6dc:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     6e0:	d0 93 8f 00 	sts	0x008F, r29	; 0x80008f <global_u8CurrYAddress>
     6e4:	80 e4       	ldi	r24, 0x40	; 64
     6e6:	8d 0f       	add	r24, r29
     6e8:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <GLCD_VoidDisplaySpecialPattern>:
		local_f32DecimalPart = ((local_f32DecimalPart * 10.0) - local_u8Digit);
	}
}

void GLCD_VoidDisplaySpecialPattern(u64 Pattern)
{
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	92 2e       	mov	r9, r18
     70a:	a3 2e       	mov	r10, r19
     70c:	b4 2e       	mov	r11, r20
     70e:	c5 2e       	mov	r12, r21
     710:	d6 2e       	mov	r13, r22
     712:	e7 2e       	mov	r14, r23
     714:	f8 2e       	mov	r15, r24
     716:	d9 2f       	mov	r29, r25
	for(u8 i = 0; i < 5; i++) {
     718:	c0 e0       	ldi	r28, 0x00	; 0
     71a:	30 c0       	rjmp	.+96     	; 0x77c <GLCD_VoidDisplaySpecialPattern+0x8a>
		GLCD_u8SendCommand(GLCD_SET_X_ADDRESS_PREFIX + global_u8CurrXAddress);
     71c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <global_u8CurrXAddress>
     720:	88 54       	subi	r24, 0x48	; 72
     722:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
		GLCD_u8SendCommand(GLCD_SET_Y_ADDRESS_PREFIX + global_u8CurrYAddress);
     726:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <global_u8CurrYAddress>
     72a:	80 5c       	subi	r24, 0xC0	; 192
     72c:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
		GLCD_VoidSendData((Pattern >> (i * 8)) & 0x00000000FFUL);
     730:	0c 2f       	mov	r16, r28
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	00 0f       	add	r16, r16
     736:	11 1f       	adc	r17, r17
     738:	00 0f       	add	r16, r16
     73a:	11 1f       	adc	r17, r17
     73c:	00 0f       	add	r16, r16
     73e:	11 1f       	adc	r17, r17
     740:	29 2d       	mov	r18, r9
     742:	3a 2d       	mov	r19, r10
     744:	4b 2d       	mov	r20, r11
     746:	5c 2d       	mov	r21, r12
     748:	6d 2d       	mov	r22, r13
     74a:	7e 2d       	mov	r23, r14
     74c:	8f 2d       	mov	r24, r15
     74e:	9d 2f       	mov	r25, r29
     750:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__lshrdi3>
     754:	82 2f       	mov	r24, r18
     756:	0e 94 4d 03 	call	0x69a	; 0x69a <GLCD_VoidSendData>
		global_u8CurrYAddress++;
     75a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <global_u8CurrYAddress>
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <global_u8CurrYAddress>
		if ((global_u8CurrYAddress >= GLCD_MAX_PAGE_PIXEL_WIDTH) && (global_u8CurrPage == 0))
     764:	80 34       	cpi	r24, 0x40	; 64
     766:	48 f0       	brcs	.+18     	; 0x77a <GLCD_VoidDisplaySpecialPattern+0x88>
     768:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     76c:	81 11       	cpse	r24, r1
     76e:	05 c0       	rjmp	.+10     	; 0x77a <GLCD_VoidDisplaySpecialPattern+0x88>
		{
			GLCD_u8SelectPage(GLCD_PAGE_1);
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GLCD_u8SelectPage>
			global_u8CurrYAddress = 0;
     776:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <global_u8CurrYAddress>
	}
}

void GLCD_VoidDisplaySpecialPattern(u64 Pattern)
{
	for(u8 i = 0; i < 5; i++) {
     77a:	cf 5f       	subi	r28, 0xFF	; 255
     77c:	c5 30       	cpi	r28, 0x05	; 5
     77e:	70 f2       	brcs	.-100    	; 0x71c <GLCD_VoidDisplaySpecialPattern+0x2a>
		{
			GLCD_u8SelectPage(GLCD_PAGE_1);
			global_u8CurrYAddress = 0;
		}
	}
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	08 95       	ret

00000798 <GLCD_VoidPrintCharacter>:

void GLCD_VoidPrintCharacter(u8 copy_u8Data)
{
     798:	e8 2f       	mov	r30, r24
	if ((global_u8CurrPage == 0) | (global_u8CurrYAddress < (GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)))
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     7a0:	81 11       	cpse	r24, r1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <global_u8CurrYAddress>
     7aa:	29 33       	cpi	r18, 0x39	; 57
     7ac:	08 f0       	brcs	.+2      	; 0x7b0 <GLCD_VoidPrintCharacter+0x18>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <GLCD_VoidPrintCharacter+0x1e>
     7b4:	88 c1       	rjmp	.+784    	; 0xac6 <__stack+0x267>
	{
		/* Enough space to write character */
		switch (copy_u8Data)
     7b6:	8e 2f       	mov	r24, r30
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	b0 97       	sbiw	r30, 0x20	; 32
     7be:	eb 35       	cpi	r30, 0x5B	; 91
     7c0:	f1 05       	cpc	r31, r1
     7c2:	08 f0       	brcs	.+2      	; 0x7c6 <GLCD_VoidPrintCharacter+0x2e>
     7c4:	63 c1       	rjmp	.+710    	; 0xa8c <__stack+0x22d>
     7c6:	e6 5d       	subi	r30, 0xD6	; 214
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__tablejump2__>
		{
			case 'A': case 'a': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_A); break;
     7ce:	2c e7       	ldi	r18, 0x7C	; 124
     7d0:	32 e1       	ldi	r19, 0x12	; 18
     7d2:	41 e1       	ldi	r20, 0x11	; 17
     7d4:	52 e1       	ldi	r21, 0x12	; 18
     7d6:	6c e7       	ldi	r22, 0x7C	; 124
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     7e2:	54 c1       	rjmp	.+680    	; 0xa8c <__stack+0x22d>
			case 'F': case 'f': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_F); break;
     7e4:	2f e7       	ldi	r18, 0x7F	; 127
     7e6:	39 e0       	ldi	r19, 0x09	; 9
     7e8:	49 e0       	ldi	r20, 0x09	; 9
     7ea:	59 e0       	ldi	r21, 0x09	; 9
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     7f8:	49 c1       	rjmp	.+658    	; 0xa8c <__stack+0x22d>
			case 'R': case 'r': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_R); break;
     7fa:	2f e7       	ldi	r18, 0x7F	; 127
     7fc:	39 e0       	ldi	r19, 0x09	; 9
     7fe:	49 e1       	ldi	r20, 0x19	; 25
     800:	59 e2       	ldi	r21, 0x29	; 41
     802:	6f e4       	ldi	r22, 0x4F	; 79
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     80e:	3e c1       	rjmp	.+636    	; 0xa8c <__stack+0x22d>
			case 'E': case 'e': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_E); break;
     810:	2f e7       	ldi	r18, 0x7F	; 127
     812:	39 e4       	ldi	r19, 0x49	; 73
     814:	49 e4       	ldi	r20, 0x49	; 73
     816:	59 e4       	ldi	r21, 0x49	; 73
     818:	61 e4       	ldi	r22, 0x41	; 65
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     824:	33 c1       	rjmp	.+614    	; 0xa8c <__stack+0x22d>
			case 'Q': case 'q': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_Q); break;
     826:	2e e1       	ldi	r18, 0x1E	; 30
     828:	31 e2       	ldi	r19, 0x21	; 33
     82a:	41 e3       	ldi	r20, 0x31	; 49
     82c:	5e e3       	ldi	r21, 0x3E	; 62
     82e:	60 e4       	ldi	r22, 0x40	; 64
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     83a:	28 c1       	rjmp	.+592    	; 0xa8c <__stack+0x22d>
			case 'U': case 'u': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_U); break;
     83c:	2f e3       	ldi	r18, 0x3F	; 63
     83e:	30 e4       	ldi	r19, 0x40	; 64
     840:	40 e4       	ldi	r20, 0x40	; 64
     842:	50 e4       	ldi	r21, 0x40	; 64
     844:	6f e3       	ldi	r22, 0x3F	; 63
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     850:	1d c1       	rjmp	.+570    	; 0xa8c <__stack+0x22d>
			case 'N': case 'n': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_N); break;
     852:	2f e7       	ldi	r18, 0x7F	; 127
     854:	32 e0       	ldi	r19, 0x02	; 2
     856:	4c e1       	ldi	r20, 0x1C	; 28
     858:	50 e2       	ldi	r21, 0x20	; 32
     85a:	6f e7       	ldi	r22, 0x7F	; 127
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     866:	12 c1       	rjmp	.+548    	; 0xa8c <__stack+0x22d>
			case 'C': case 'c': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_C); break;
     868:	2e e3       	ldi	r18, 0x3E	; 62
     86a:	31 e4       	ldi	r19, 0x41	; 65
     86c:	41 e4       	ldi	r20, 0x41	; 65
     86e:	51 e4       	ldi	r21, 0x41	; 65
     870:	61 e4       	ldi	r22, 0x41	; 65
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     87c:	07 c1       	rjmp	.+526    	; 0xa8c <__stack+0x22d>
			case 'Y': case 'y': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_Y); break;
     87e:	23 e0       	ldi	r18, 0x03	; 3
     880:	3c e0       	ldi	r19, 0x0C	; 12
     882:	40 e7       	ldi	r20, 0x70	; 112
     884:	5c e0       	ldi	r21, 0x0C	; 12
     886:	63 e0       	ldi	r22, 0x03	; 3
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     892:	fc c0       	rjmp	.+504    	; 0xa8c <__stack+0x22d>
			case 'D': case 'd': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_D); break;
     894:	2f e7       	ldi	r18, 0x7F	; 127
     896:	31 e4       	ldi	r19, 0x41	; 65
     898:	41 e4       	ldi	r20, 0x41	; 65
     89a:	5e e3       	ldi	r21, 0x3E	; 62
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     8a8:	f1 c0       	rjmp	.+482    	; 0xa8c <__stack+0x22d>
			case 'T': case 't': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_T); break;
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	31 e0       	ldi	r19, 0x01	; 1
     8ae:	4f e7       	ldi	r20, 0x7F	; 127
     8b0:	51 e0       	ldi	r21, 0x01	; 1
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     8be:	e6 c0       	rjmp	.+460    	; 0xa8c <__stack+0x22d>
			case 'K': case 'k': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_K); break;
     8c0:	2f e7       	ldi	r18, 0x7F	; 127
     8c2:	38 e0       	ldi	r19, 0x08	; 8
     8c4:	44 e1       	ldi	r20, 0x14	; 20
     8c6:	52 e2       	ldi	r21, 0x22	; 34
     8c8:	61 e4       	ldi	r22, 0x41	; 65
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     8d4:	db c0       	rjmp	.+438    	; 0xa8c <__stack+0x22d>
			case 'H': case 'h': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_H); break;
     8d6:	2f e7       	ldi	r18, 0x7F	; 127
     8d8:	38 e0       	ldi	r19, 0x08	; 8
     8da:	48 e0       	ldi	r20, 0x08	; 8
     8dc:	58 e0       	ldi	r21, 0x08	; 8
     8de:	6f e7       	ldi	r22, 0x7F	; 127
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     8ea:	d0 c0       	rjmp	.+416    	; 0xa8c <__stack+0x22d>
			case 'Z': case 'z': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_Z); break;
     8ec:	21 e6       	ldi	r18, 0x61	; 97
     8ee:	31 e5       	ldi	r19, 0x51	; 81
     8f0:	49 e4       	ldi	r20, 0x49	; 73
     8f2:	55 e4       	ldi	r21, 0x45	; 69
     8f4:	63 e4       	ldi	r22, 0x43	; 67
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     900:	c5 c0       	rjmp	.+394    	; 0xa8c <__stack+0x22d>
			case 'M': case 'm': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_M); break;
     902:	2f e7       	ldi	r18, 0x7F	; 127
     904:	32 e0       	ldi	r19, 0x02	; 2
     906:	4c e0       	ldi	r20, 0x0C	; 12
     908:	52 e0       	ldi	r21, 0x02	; 2
     90a:	6f e7       	ldi	r22, 0x7F	; 127
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     916:	ba c0       	rjmp	.+372    	; 0xa8c <__stack+0x22d>
			case 'S': case 's': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_S); break;
     918:	2f e4       	ldi	r18, 0x4F	; 79
     91a:	39 e4       	ldi	r19, 0x49	; 73
     91c:	49 e4       	ldi	r20, 0x49	; 73
     91e:	59 e4       	ldi	r21, 0x49	; 73
     920:	69 ef       	ldi	r22, 0xF9	; 249
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     92c:	af c0       	rjmp	.+350    	; 0xa8c <__stack+0x22d>
			case 'I': case 'i': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_I); break;
     92e:	21 e4       	ldi	r18, 0x41	; 65
     930:	31 e4       	ldi	r19, 0x41	; 65
     932:	4f e7       	ldi	r20, 0x7F	; 127
     934:	51 e4       	ldi	r21, 0x41	; 65
     936:	61 e4       	ldi	r22, 0x41	; 65
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     942:	a4 c0       	rjmp	.+328    	; 0xa8c <__stack+0x22d>
			case '%': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     944:	23 ec       	ldi	r18, 0xC3	; 195
     946:	33 e7       	ldi	r19, 0x73	; 115
     948:	48 e1       	ldi	r20, 0x18	; 24
     94a:	5e ec       	ldi	r21, 0xCE	; 206
     94c:	63 ec       	ldi	r22, 0xC3	; 195
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     958:	99 c0       	rjmp	.+306    	; 0xa8c <__stack+0x22d>
			case '=': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     95a:	24 e2       	ldi	r18, 0x24	; 36
     95c:	34 e2       	ldi	r19, 0x24	; 36
     95e:	44 e2       	ldi	r20, 0x24	; 36
     960:	54 e2       	ldi	r21, 0x24	; 36
     962:	64 e2       	ldi	r22, 0x24	; 36
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     96e:	8e c0       	rjmp	.+284    	; 0xa8c <__stack+0x22d>
			case '.': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_POINT); break;
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e7       	ldi	r19, 0x70	; 112
     974:	40 e7       	ldi	r20, 0x70	; 112
     976:	50 e7       	ldi	r21, 0x70	; 112
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     984:	83 c0       	rjmp	.+262    	; 0xa8c <__stack+0x22d>
			case ' ': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     99a:	78 c0       	rjmp	.+240    	; 0xa8c <__stack+0x22d>
			case '-': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     99c:	28 e1       	ldi	r18, 0x18	; 24
     99e:	38 e1       	ldi	r19, 0x18	; 24
     9a0:	48 e1       	ldi	r20, 0x18	; 24
     9a2:	58 e1       	ldi	r21, 0x18	; 24
     9a4:	68 e1       	ldi	r22, 0x18	; 24
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     9b0:	6d c0       	rjmp	.+218    	; 0xa8c <__stack+0x22d>
			case '0': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_0); break;
     9b2:	2e e3       	ldi	r18, 0x3E	; 62
     9b4:	31 e5       	ldi	r19, 0x51	; 81
     9b6:	49 e4       	ldi	r20, 0x49	; 73
     9b8:	55 e4       	ldi	r21, 0x45	; 69
     9ba:	6e e3       	ldi	r22, 0x3E	; 62
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     9c6:	62 c0       	rjmp	.+196    	; 0xa8c <__stack+0x22d>
			case '1': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_1); break;
     9c8:	24 e4       	ldi	r18, 0x44	; 68
     9ca:	32 e4       	ldi	r19, 0x42	; 66
     9cc:	4f e7       	ldi	r20, 0x7F	; 127
     9ce:	50 e4       	ldi	r21, 0x40	; 64
     9d0:	60 e4       	ldi	r22, 0x40	; 64
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     9dc:	57 c0       	rjmp	.+174    	; 0xa8c <__stack+0x22d>
			case '2': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_2); break;
     9de:	26 e4       	ldi	r18, 0x46	; 70
     9e0:	31 e6       	ldi	r19, 0x61	; 97
     9e2:	41 e5       	ldi	r20, 0x51	; 81
     9e4:	5e e4       	ldi	r21, 0x4E	; 78
     9e6:	60 e4       	ldi	r22, 0x40	; 64
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     9f2:	4c c0       	rjmp	.+152    	; 0xa8c <__stack+0x22d>
			case '3': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_3); break;
     9f4:	21 e4       	ldi	r18, 0x41	; 65
     9f6:	39 e4       	ldi	r19, 0x49	; 73
     9f8:	49 e4       	ldi	r20, 0x49	; 73
     9fa:	59 e4       	ldi	r21, 0x49	; 73
     9fc:	66 e3       	ldi	r22, 0x36	; 54
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a08:	41 c0       	rjmp	.+130    	; 0xa8c <__stack+0x22d>
			case '4': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_4); break;
     a0a:	28 e1       	ldi	r18, 0x18	; 24
     a0c:	34 e1       	ldi	r19, 0x14	; 20
     a0e:	42 e1       	ldi	r20, 0x12	; 18
     a10:	5f e7       	ldi	r21, 0x7F	; 127
     a12:	60 e1       	ldi	r22, 0x10	; 16
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a1e:	36 c0       	rjmp	.+108    	; 0xa8c <__stack+0x22d>
			case '5': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_5); break;
     a20:	2f e4       	ldi	r18, 0x4F	; 79
     a22:	39 e4       	ldi	r19, 0x49	; 73
     a24:	49 e4       	ldi	r20, 0x49	; 73
     a26:	51 e5       	ldi	r21, 0x51	; 81
     a28:	61 e2       	ldi	r22, 0x21	; 33
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a34:	2b c0       	rjmp	.+86     	; 0xa8c <__stack+0x22d>
			case '6': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_6); break;
     a36:	2c e7       	ldi	r18, 0x7C	; 124
     a38:	3a e4       	ldi	r19, 0x4A	; 74
     a3a:	49 e4       	ldi	r20, 0x49	; 73
     a3c:	59 e4       	ldi	r21, 0x49	; 73
     a3e:	61 e3       	ldi	r22, 0x31	; 49
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a4a:	20 c0       	rjmp	.+64     	; 0xa8c <__stack+0x22d>
			case '7': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_7); break;
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	39 e4       	ldi	r19, 0x49	; 73
     a50:	49 e2       	ldi	r20, 0x29	; 41
     a52:	59 e1       	ldi	r21, 0x19	; 25
     a54:	6f e0       	ldi	r22, 0x0F	; 15
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a60:	15 c0       	rjmp	.+42     	; 0xa8c <__stack+0x22d>
			case '8': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_8); break;
     a62:	27 e7       	ldi	r18, 0x77	; 119
     a64:	39 e4       	ldi	r19, 0x49	; 73
     a66:	49 e4       	ldi	r20, 0x49	; 73
     a68:	59 e4       	ldi	r21, 0x49	; 73
     a6a:	67 e7       	ldi	r22, 0x77	; 119
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <__stack+0x22d>
			case '9': GLCD_VoidDisplaySpecialPattern(GLCD_CHAR_9); break;
     a78:	2f e4       	ldi	r18, 0x4F	; 79
     a7a:	39 e4       	ldi	r19, 0x49	; 73
     a7c:	49 e4       	ldi	r20, 0x49	; 73
     a7e:	59 e4       	ldi	r21, 0x49	; 73
     a80:	6f e7       	ldi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GLCD_VoidDisplaySpecialPattern>
			default: break;
		}
		GLCD_u8SendCommand(GLCD_SET_X_ADDRESS_PREFIX + global_u8CurrXAddress);
     a8c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <global_u8CurrXAddress>
     a90:	88 54       	subi	r24, 0x48	; 72
     a92:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
		GLCD_u8SendCommand(GLCD_SET_Y_ADDRESS_PREFIX + global_u8CurrYAddress);
     a96:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <global_u8CurrYAddress>
     a9a:	80 5c       	subi	r24, 0xC0	; 192
     a9c:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_u8SendCommand>
		GLCD_VoidSendData(0);
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 4d 03 	call	0x69a	; 0x69a <GLCD_VoidSendData>
		global_u8CurrYAddress++;
     aa6:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <global_u8CurrYAddress>
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <global_u8CurrYAddress>
		if (global_u8CurrYAddress >= GLCD_MAX_PAGE_PIXEL_WIDTH && global_u8CurrPage == 0)
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	48 f0       	brcs	.+18     	; 0xac6 <__stack+0x267>
     ab4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     ab8:	81 11       	cpse	r24, r1
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <__stack+0x267>
		{
			GLCD_u8SelectPage(GLCD_PAGE_1);
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <GLCD_u8SelectPage>
			global_u8CurrYAddress = 0;
     ac2:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <global_u8CurrYAddress>
     ac6:	08 95       	ret

00000ac8 <GLCD_u8PrintString>:
		}
	}
}

u8 GLCD_u8PrintString(const char *copy_u8String)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
	u8 local_u8ErrorState = OK;
	u8 local_u8StringIndex = 0;
	
	if(copy_u8String != NULL)
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	31 f4       	brne	.+12     	; 0xade <GLCD_u8PrintString+0x16>
			local_u8StringIndex ++;
		}
	}
	else
	{
		local_u8ErrorState = NOK;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0c c0       	rjmp	.+24     	; 0xaee <GLCD_u8PrintString+0x26>
	
	if(copy_u8String != NULL)
	{
		while(copy_u8String[local_u8StringIndex] != '\0' )
		{
			GLCD_VoidPrintCharacter(copy_u8String[local_u8StringIndex]);
     ad6:	0e 94 cc 03 	call	0x798	; 0x798 <GLCD_VoidPrintCharacter>
			local_u8StringIndex ++;
     ada:	cf 5f       	subi	r28, 0xFF	; 255
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <GLCD_u8PrintString+0x1a>
     ade:	8c 01       	movw	r16, r24
     ae0:	c0 e0       	ldi	r28, 0x00	; 0
	u8 local_u8ErrorState = OK;
	u8 local_u8StringIndex = 0;
	
	if(copy_u8String != NULL)
	{
		while(copy_u8String[local_u8StringIndex] != '\0' )
     ae2:	f8 01       	movw	r30, r16
     ae4:	ec 0f       	add	r30, r28
     ae6:	f1 1d       	adc	r31, r1
     ae8:	80 81       	ld	r24, Z
     aea:	81 11       	cpse	r24, r1
     aec:	f4 cf       	rjmp	.-24     	; 0xad6 <GLCD_u8PrintString+0xe>
	else
	{
		local_u8ErrorState = NOK;
	}
	return local_u8ErrorState;
}
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <GLCD_VoidWriteNumber>:

void GLCD_VoidWriteNumber(u32 copy_u32Number)
{
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	8b 01       	movw	r16, r22
     b04:	9c 01       	movw	r18, r24
	u32 local_reversed = 1;

	if(copy_u32Number == 0)
     b06:	67 2b       	or	r22, r23
     b08:	68 2b       	or	r22, r24
     b0a:	69 2b       	or	r22, r25
     b0c:	49 f5       	brne	.+82     	; 0xb60 <GLCD_VoidWriteNumber+0x6a>
	{
		GLCD_VoidPrintCharacter('0');
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	0e 94 cc 03 	call	0x798	; 0x798 <GLCD_VoidPrintCharacter>
     b14:	45 c0       	rjmp	.+138    	; 0xba0 <GLCD_VoidWriteNumber+0xaa>
	else
	{
		/* Reverse Number */
		while (copy_u32Number != 0)
		{
			local_reversed = local_reversed * 10 + (copy_u32Number % 10);
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	aa 1f       	adc	r26, r26
     b20:	bb 1f       	adc	r27, r27
     b22:	6c 01       	movw	r12, r24
     b24:	7d 01       	movw	r14, r26
     b26:	cc 0c       	add	r12, r12
     b28:	dd 1c       	adc	r13, r13
     b2a:	ee 1c       	adc	r14, r14
     b2c:	ff 1c       	adc	r15, r15
     b2e:	cc 0c       	add	r12, r12
     b30:	dd 1c       	adc	r13, r13
     b32:	ee 1c       	adc	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	c8 0e       	add	r12, r24
     b38:	d9 1e       	adc	r13, r25
     b3a:	ea 1e       	adc	r14, r26
     b3c:	fb 1e       	adc	r15, r27
     b3e:	c9 01       	movw	r24, r18
     b40:	b8 01       	movw	r22, r16
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodsi4>
     b4e:	6c 0d       	add	r22, r12
     b50:	7d 1d       	adc	r23, r13
     b52:	8e 1d       	adc	r24, r14
     b54:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
     b56:	02 2f       	mov	r16, r18
     b58:	13 2f       	mov	r17, r19
     b5a:	24 2f       	mov	r18, r20
     b5c:	35 2f       	mov	r19, r21
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <GLCD_VoidWriteNumber+0x72>
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
		GLCD_VoidPrintCharacter('0');
	}
	else
	{
		/* Reverse Number */
		while (copy_u32Number != 0)
     b68:	01 15       	cp	r16, r1
     b6a:	11 05       	cpc	r17, r1
     b6c:	21 05       	cpc	r18, r1
     b6e:	31 05       	cpc	r19, r1
     b70:	91 f6       	brne	.-92     	; 0xb16 <GLCD_VoidWriteNumber+0x20>
			local_reversed = local_reversed * 10 + (copy_u32Number % 10);
			copy_u32Number /= 10;
		}
		do
		{
			GLCD_VoidPrintCharacter((local_reversed % 10) + '0');
     b72:	2a e0       	ldi	r18, 0x0A	; 10
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodsi4>
     b7e:	e2 2e       	mov	r14, r18
     b80:	f3 2e       	mov	r15, r19
     b82:	04 2f       	mov	r16, r20
     b84:	15 2f       	mov	r17, r21
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	86 0f       	add	r24, r22
     b8a:	0e 94 cc 03 	call	0x798	; 0x798 <GLCD_VoidPrintCharacter>
			local_reversed /= 10;
     b8e:	6e 2d       	mov	r22, r14
     b90:	7f 2d       	mov	r23, r15
     b92:	80 2f       	mov	r24, r16
     b94:	91 2f       	mov	r25, r17
		}
		while(local_reversed != 1);
     b96:	61 30       	cpi	r22, 0x01	; 1
     b98:	71 05       	cpc	r23, r1
     b9a:	81 05       	cpc	r24, r1
     b9c:	91 05       	cpc	r25, r1
     b9e:	49 f7       	brne	.-46     	; 0xb72 <GLCD_VoidWriteNumber+0x7c>
	}
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	08 95       	ret

00000bae <GLCD_VoidDisplayFloatingPoint>:
}


/***********  Display Functions ***********/
void GLCD_VoidDisplayFloatingPoint(f32 copy_f32FloatingNumber)
{
     bae:	8f 92       	push	r8
     bb0:	9f 92       	push	r9
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	4b 01       	movw	r8, r22
     bc4:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	u16 local_u16IntegerPart = (u16)copy_f32FloatingNumber;
     bc6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
	u8 local_u8Counter = 0;
	
	GLCD_VoidWriteNumber(local_u16IntegerPart);			/* Displaying Integer Part of the Number */
     bca:	6b 01       	movw	r12, r22
     bcc:	e1 2c       	mov	r14, r1
     bce:	f1 2c       	mov	r15, r1
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <GLCD_VoidWriteNumber>
	GLCD_VoidPrintCharacter('.');
     bd8:	8e e2       	ldi	r24, 0x2E	; 46
     bda:	0e 94 cc 03 	call	0x798	; 0x798 <GLCD_VoidPrintCharacter>
	f32 local_f32DecimalPart = (copy_f32FloatingNumber - local_u16IntegerPart);
     bde:	c7 01       	movw	r24, r14
     be0:	b6 01       	movw	r22, r12
     be2:	0e 94 83 0c 	call	0x1906	; 0x1906 <__floatunsisf>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	c5 01       	movw	r24, r10
     bec:	b4 01       	movw	r22, r8
     bee:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__subsf3>
	u8 local_u8Digit = 0;
	
	for (local_u8Counter = 0; local_u8Counter < 3; local_u8Counter++)		/* Displaying 3 Decimals of the Number */
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	1c c0       	rjmp	.+56     	; 0xc2e <GLCD_VoidDisplayFloatingPoint+0x80>
	{
		local_u8Digit = (u8)(local_f32DecimalPart * 10.0);
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e2       	ldi	r20, 0x20	; 32
     bfc:	51 e4       	ldi	r21, 0x41	; 65
     bfe:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
     c02:	6b 01       	movw	r12, r22
     c04:	7c 01       	movw	r14, r24
     c06:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
     c0a:	c6 2f       	mov	r28, r22
		GLCD_VoidPrintCharacter((char)(48 + local_u8Digit));
     c0c:	80 e3       	ldi	r24, 0x30	; 48
     c0e:	8c 0f       	add	r24, r28
     c10:	0e 94 cc 03 	call	0x798	; 0x798 <GLCD_VoidPrintCharacter>
		local_f32DecimalPart = ((local_f32DecimalPart * 10.0) - local_u8Digit);
     c14:	6c 2f       	mov	r22, r28
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatsisf>
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	c7 01       	movw	r24, r14
     c26:	b6 01       	movw	r22, r12
     c28:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__subsf3>
	GLCD_VoidWriteNumber(local_u16IntegerPart);			/* Displaying Integer Part of the Number */
	GLCD_VoidPrintCharacter('.');
	f32 local_f32DecimalPart = (copy_f32FloatingNumber - local_u16IntegerPart);
	u8 local_u8Digit = 0;
	
	for (local_u8Counter = 0; local_u8Counter < 3; local_u8Counter++)		/* Displaying 3 Decimals of the Number */
     c2c:	df 5f       	subi	r29, 0xFF	; 255
     c2e:	d3 30       	cpi	r29, 0x03	; 3
     c30:	10 f3       	brcs	.-60     	; 0xbf6 <GLCD_VoidDisplayFloatingPoint+0x48>
	{
		local_u8Digit = (u8)(local_f32DecimalPart * 10.0);
		GLCD_VoidPrintCharacter((char)(48 + local_u8Digit));
		local_f32DecimalPart = ((local_f32DecimalPart * 10.0) - local_u8Digit);
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	08 95       	ret

00000c48 <main>:
/* APP */
#include "APP/PWMDrawer/PWMDrawer_Interface.h"


int main(void)
{	
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	64 97       	sbiw	r28, 0x14	; 20
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
	/* Variable Initializations */
	f32 f32Duty = 0;
     c5c:	19 82       	std	Y+1, r1	; 0x01
     c5e:	1a 82       	std	Y+2, r1	; 0x02
     c60:	1b 82       	std	Y+3, r1	; 0x03
     c62:	1c 82       	std	Y+4, r1	; 0x04
	f32 f32Freq = 0;
     c64:	1d 82       	std	Y+5, r1	; 0x05
     c66:	1e 82       	std	Y+6, r1	; 0x06
     c68:	1f 82       	std	Y+7, r1	; 0x07
     c6a:	18 86       	std	Y+8, r1	; 0x08
	f32 f32Periodic_Time = 0;
     c6c:	19 86       	std	Y+9, r1	; 0x09
     c6e:	1a 86       	std	Y+10, r1	; 0x0a
     c70:	1b 86       	std	Y+11, r1	; 0x0b
     c72:	1c 86       	std	Y+12, r1	; 0x0c
	f32 f32HighTime = 0;
     c74:	1d 86       	std	Y+13, r1	; 0x0d
     c76:	1e 86       	std	Y+14, r1	; 0x0e
     c78:	1f 86       	std	Y+15, r1	; 0x0f
     c7a:	18 8a       	std	Y+16, r1	; 0x10
	f32 f32Low_time = 0;
     c7c:	19 8a       	std	Y+17, r1	; 0x11
     c7e:	1a 8a       	std	Y+18, r1	; 0x12
     c80:	1b 8a       	std	Y+19, r1	; 0x13
     c82:	1c 8a       	std	Y+20, r1	; 0x14
	
	/* Peripherals Initializations */
	TIMER0_VoidInit();			/* Timer0 Initialization */
     c84:	0e 94 58 09 	call	0x12b0	; 0x12b0 <TIMER0_VoidInit>
	TIMER1_VoidInit();			/* Timer1 Initialization */
     c88:	0e 94 73 09 	call	0x12e6	; 0x12e6 <TIMER1_VoidInit>
	ICU_VoidTimer1Init();		/* ICU Initialization Using Timer1 */
     c8c:	0e 94 98 08 	call	0x1130	; 0x1130 <ICU_VoidTimer1Init>
	TIMER2_VoidInit();			/* Timer2 Initialization */
     c90:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER2_VoidInit>
	GIE_Enable();				/* Global Interrupt Enable */
     c94:	0e 94 10 08 	call	0x1020	; 0x1020 <GIE_Enable>
	GLCD_VoidInit();			/* Graphical LCD Initialization */
     c98:	0e 94 10 03 	call	0x620	; 0x620 <GLCD_VoidInit>
	
	/* I/O Pins Initialization */
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);		/* Timer0 PWM OC0 */
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT);		/* ICP1 Pin as Input */
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	66 e0       	ldi	r22, 0x06	; 6
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
	
	
	TIMER0_u8PWMDutyCycle(80);
     cb0:	80 e5       	ldi	r24, 0x50	; 80
     cb2:	0e 94 10 0a 	call	0x1420	; 0x1420 <TIMER0_u8PWMDutyCycle>
    /* Replace with your application code */
    while (1) 
    {
		ICU_VoidTimer1SignalCapture(&f32Duty, &f32Freq, &f32Periodic_Time, &f32HighTime, &f32Low_time);		/* Parameter Calculation */
     cb6:	8e 01       	movw	r16, r28
     cb8:	0f 5e       	subi	r16, 0xEF	; 239
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	9e 01       	movw	r18, r28
     cbe:	23 5f       	subi	r18, 0xF3	; 243
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	ae 01       	movw	r20, r28
     cc4:	47 5f       	subi	r20, 0xF7	; 247
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	be 01       	movw	r22, r28
     cca:	6b 5f       	subi	r22, 0xFB	; 251
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 a4 08 	call	0x1148	; 0x1148 <ICU_VoidTimer1SignalCapture>
		PWMDrawer_VoidDrawSignal(f32Duty, f32Freq, f32Periodic_Time, f32HighTime, f32Low_time);				/* PWM & Parameters Display */
     cd6:	ad 84       	ldd	r10, Y+13	; 0x0d
     cd8:	be 84       	ldd	r11, Y+14	; 0x0e
     cda:	cf 84       	ldd	r12, Y+15	; 0x0f
     cdc:	d8 88       	ldd	r13, Y+16	; 0x10
     cde:	e9 84       	ldd	r14, Y+9	; 0x09
     ce0:	fa 84       	ldd	r15, Y+10	; 0x0a
     ce2:	0b 85       	ldd	r16, Y+11	; 0x0b
     ce4:	1c 85       	ldd	r17, Y+12	; 0x0c
     ce6:	2d 81       	ldd	r18, Y+5	; 0x05
     ce8:	3e 81       	ldd	r19, Y+6	; 0x06
     cea:	4f 81       	ldd	r20, Y+7	; 0x07
     cec:	58 85       	ldd	r21, Y+8	; 0x08
     cee:	69 81       	ldd	r22, Y+1	; 0x01
     cf0:	7a 81       	ldd	r23, Y+2	; 0x02
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	ec 89       	ldd	r30, Y+20	; 0x14
     cf8:	ef 93       	push	r30
     cfa:	eb 89       	ldd	r30, Y+19	; 0x13
     cfc:	ef 93       	push	r30
     cfe:	ea 89       	ldd	r30, Y+18	; 0x12
     d00:	ef 93       	push	r30
     d02:	e9 89       	ldd	r30, Y+17	; 0x11
     d04:	ef 93       	push	r30
     d06:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <PWMDrawer_VoidDrawSignal>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	d1 cf       	rjmp	.-94     	; 0xcb6 <main+0x6e>

00000d14 <DIO_u8SetPinDirection>:
     d14:	68 30       	cpi	r22, 0x08	; 8
     d16:	08 f0       	brcs	.+2      	; 0xd1a <DIO_u8SetPinDirection+0x6>
     d18:	78 c0       	rjmp	.+240    	; 0xe0a <DIO_u8SetPinDirection+0xf6>
     d1a:	41 30       	cpi	r20, 0x01	; 1
     d1c:	c1 f5       	brne	.+112    	; 0xd8e <DIO_u8SetPinDirection+0x7a>
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 f0       	breq	.+36     	; 0xd46 <DIO_u8SetPinDirection+0x32>
     d22:	28 f0       	brcs	.+10     	; 0xd2e <DIO_u8SetPinDirection+0x1a>
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	d9 f0       	breq	.+54     	; 0xd5e <DIO_u8SetPinDirection+0x4a>
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	29 f1       	breq	.+74     	; 0xd76 <DIO_u8SetPinDirection+0x62>
     d2c:	70 c0       	rjmp	.+224    	; 0xe0e <DIO_u8SetPinDirection+0xfa>
     d2e:	2a b3       	in	r18, 0x1a	; 26
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_u8SetPinDirection+0x26>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	6a 95       	dec	r22
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_u8SetPinDirection+0x22>
     d3e:	82 2b       	or	r24, r18
     d40:	8a bb       	out	0x1a, r24	; 26
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	08 95       	ret
     d46:	27 b3       	in	r18, 0x17	; 23
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_u8SetPinDirection+0x3e>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_u8SetPinDirection+0x3a>
     d56:	82 2b       	or	r24, r18
     d58:	87 bb       	out	0x17, r24	; 23
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
     d5e:	24 b3       	in	r18, 0x14	; 20
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_u8SetPinDirection+0x56>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	6a 95       	dec	r22
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_u8SetPinDirection+0x52>
     d6e:	82 2b       	or	r24, r18
     d70:	84 bb       	out	0x14, r24	; 20
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	08 95       	ret
     d76:	21 b3       	in	r18, 0x11	; 17
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8SetPinDirection+0x6e>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	6a 95       	dec	r22
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8SetPinDirection+0x6a>
     d86:	82 2b       	or	r24, r18
     d88:	81 bb       	out	0x11, r24	; 17
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	08 95       	ret
     d8e:	41 11       	cpse	r20, r1
     d90:	40 c0       	rjmp	.+128    	; 0xe12 <DIO_u8SetPinDirection+0xfe>
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	99 f0       	breq	.+38     	; 0xdbc <DIO_u8SetPinDirection+0xa8>
     d96:	28 f0       	brcs	.+10     	; 0xda2 <DIO_u8SetPinDirection+0x8e>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	e9 f0       	breq	.+58     	; 0xdd6 <DIO_u8SetPinDirection+0xc2>
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	41 f1       	breq	.+80     	; 0xdf0 <DIO_u8SetPinDirection+0xdc>
     da0:	3a c0       	rjmp	.+116    	; 0xe16 <DIO_u8SetPinDirection+0x102>
     da2:	2a b3       	in	r18, 0x1a	; 26
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_u8SetPinDirection+0x9a>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	6a 95       	dec	r22
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_u8SetPinDirection+0x96>
     db2:	80 95       	com	r24
     db4:	82 23       	and	r24, r18
     db6:	8a bb       	out	0x1a, r24	; 26
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	08 95       	ret
     dbc:	27 b3       	in	r18, 0x17	; 23
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_u8SetPinDirection+0xb4>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	6a 95       	dec	r22
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_u8SetPinDirection+0xb0>
     dcc:	80 95       	com	r24
     dce:	82 23       	and	r24, r18
     dd0:	87 bb       	out	0x17, r24	; 23
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
     dd6:	24 b3       	in	r18, 0x14	; 20
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_u8SetPinDirection+0xce>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	6a 95       	dec	r22
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_u8SetPinDirection+0xca>
     de6:	80 95       	com	r24
     de8:	82 23       	and	r24, r18
     dea:	84 bb       	out	0x14, r24	; 20
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
     df0:	21 b3       	in	r18, 0x11	; 17
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_u8SetPinDirection+0xe8>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	6a 95       	dec	r22
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_u8SetPinDirection+0xe4>
     e00:	80 95       	com	r24
     e02:	82 23       	and	r24, r18
     e04:	81 bb       	out	0x11, r24	; 17
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	08 95       	ret
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	08 95       	ret
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	08 95       	ret

00000e1a <DIO_u8SetPortDirection>:
     e1a:	6f 3f       	cpi	r22, 0xFF	; 255
     e1c:	c1 f4       	brne	.+48     	; 0xe4e <DIO_u8SetPortDirection+0x34>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	51 f0       	breq	.+20     	; 0xe36 <DIO_u8SetPortDirection+0x1c>
     e22:	28 f0       	brcs	.+10     	; 0xe2e <DIO_u8SetPortDirection+0x14>
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	59 f0       	breq	.+22     	; 0xe3e <DIO_u8SetPortDirection+0x24>
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	69 f0       	breq	.+26     	; 0xe46 <DIO_u8SetPortDirection+0x2c>
     e2c:	26 c0       	rjmp	.+76     	; 0xe7a <DIO_u8SetPortDirection+0x60>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	8a bb       	out	0x1a, r24	; 26
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	08 95       	ret
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	87 bb       	out	0x17, r24	; 23
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	84 bb       	out	0x14, r24	; 20
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	81 bb       	out	0x11, r24	; 17
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret
     e4e:	61 11       	cpse	r22, r1
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <DIO_u8SetPortDirection+0x64>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	49 f0       	breq	.+18     	; 0xe68 <DIO_u8SetPortDirection+0x4e>
     e56:	28 f0       	brcs	.+10     	; 0xe62 <DIO_u8SetPortDirection+0x48>
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	49 f0       	breq	.+18     	; 0xe6e <DIO_u8SetPortDirection+0x54>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	51 f0       	breq	.+20     	; 0xe74 <DIO_u8SetPortDirection+0x5a>
     e60:	10 c0       	rjmp	.+32     	; 0xe82 <DIO_u8SetPortDirection+0x68>
     e62:	1a ba       	out	0x1a, r1	; 26
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	08 95       	ret
     e68:	17 ba       	out	0x17, r1	; 23
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret
     e6e:	14 ba       	out	0x14, r1	; 20
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret
     e74:	11 ba       	out	0x11, r1	; 17
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 95       	ret
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	08 95       	ret

00000e86 <DIO_u8SetPinValue>:
     e86:	68 30       	cpi	r22, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <DIO_u8SetPinValue+0x6>
     e8a:	78 c0       	rjmp	.+240    	; 0xf7c <DIO_u8SetPinValue+0xf6>
     e8c:	41 30       	cpi	r20, 0x01	; 1
     e8e:	c1 f5       	brne	.+112    	; 0xf00 <DIO_u8SetPinValue+0x7a>
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 f0       	breq	.+36     	; 0xeb8 <DIO_u8SetPinValue+0x32>
     e94:	28 f0       	brcs	.+10     	; 0xea0 <DIO_u8SetPinValue+0x1a>
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	d9 f0       	breq	.+54     	; 0xed0 <DIO_u8SetPinValue+0x4a>
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	29 f1       	breq	.+74     	; 0xee8 <DIO_u8SetPinValue+0x62>
     e9e:	70 c0       	rjmp	.+224    	; 0xf80 <DIO_u8SetPinValue+0xfa>
     ea0:	2b b3       	in	r18, 0x1b	; 27
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinValue+0x26>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	6a 95       	dec	r22
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinValue+0x22>
     eb0:	82 2b       	or	r24, r18
     eb2:	8b bb       	out	0x1b, r24	; 27
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	08 95       	ret
     eb8:	28 b3       	in	r18, 0x18	; 24
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_u8SetPinValue+0x3e>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	6a 95       	dec	r22
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_u8SetPinValue+0x3a>
     ec8:	82 2b       	or	r24, r18
     eca:	88 bb       	out	0x18, r24	; 24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	08 95       	ret
     ed0:	25 b3       	in	r18, 0x15	; 21
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_u8SetPinValue+0x56>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	6a 95       	dec	r22
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_u8SetPinValue+0x52>
     ee0:	82 2b       	or	r24, r18
     ee2:	85 bb       	out	0x15, r24	; 21
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	08 95       	ret
     ee8:	22 b3       	in	r18, 0x12	; 18
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8SetPinValue+0x6e>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	6a 95       	dec	r22
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_u8SetPinValue+0x6a>
     ef8:	82 2b       	or	r24, r18
     efa:	82 bb       	out	0x12, r24	; 18
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret
     f00:	41 11       	cpse	r20, r1
     f02:	40 c0       	rjmp	.+128    	; 0xf84 <DIO_u8SetPinValue+0xfe>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	99 f0       	breq	.+38     	; 0xf2e <DIO_u8SetPinValue+0xa8>
     f08:	28 f0       	brcs	.+10     	; 0xf14 <DIO_u8SetPinValue+0x8e>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	e9 f0       	breq	.+58     	; 0xf48 <DIO_u8SetPinValue+0xc2>
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	41 f1       	breq	.+80     	; 0xf62 <DIO_u8SetPinValue+0xdc>
     f12:	3a c0       	rjmp	.+116    	; 0xf88 <DIO_u8SetPinValue+0x102>
     f14:	2b b3       	in	r18, 0x1b	; 27
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_u8SetPinValue+0x9a>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	6a 95       	dec	r22
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_u8SetPinValue+0x96>
     f24:	80 95       	com	r24
     f26:	82 23       	and	r24, r18
     f28:	8b bb       	out	0x1b, r24	; 27
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	08 95       	ret
     f2e:	28 b3       	in	r18, 0x18	; 24
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_u8SetPinValue+0xb4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	6a 95       	dec	r22
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_u8SetPinValue+0xb0>
     f3e:	80 95       	com	r24
     f40:	82 23       	and	r24, r18
     f42:	88 bb       	out	0x18, r24	; 24
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	08 95       	ret
     f48:	25 b3       	in	r18, 0x15	; 21
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_u8SetPinValue+0xce>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	6a 95       	dec	r22
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_u8SetPinValue+0xca>
     f58:	80 95       	com	r24
     f5a:	82 23       	and	r24, r18
     f5c:	85 bb       	out	0x15, r24	; 21
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret
     f62:	22 b3       	in	r18, 0x12	; 18
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_u8SetPinValue+0xe8>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	6a 95       	dec	r22
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_u8SetPinValue+0xe4>
     f72:	80 95       	com	r24
     f74:	82 23       	and	r24, r18
     f76:	82 bb       	out	0x12, r24	; 18
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	08 95       	ret
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	08 95       	ret
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	08 95       	ret
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	08 95       	ret

00000f8c <DIO_u8SetPortValue>:
     f8c:	6f 3f       	cpi	r22, 0xFF	; 255
     f8e:	c1 f4       	brne	.+48     	; 0xfc0 <DIO_u8SetPortValue+0x34>
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	51 f0       	breq	.+20     	; 0xfa8 <DIO_u8SetPortValue+0x1c>
     f94:	28 f0       	brcs	.+10     	; 0xfa0 <DIO_u8SetPortValue+0x14>
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	59 f0       	breq	.+22     	; 0xfb0 <DIO_u8SetPortValue+0x24>
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <DIO_u8SetPortValue+0x2c>
     f9e:	3a c0       	rjmp	.+116    	; 0x1014 <DIO_u8SetPortValue+0x88>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	8b bb       	out	0x1b, r24	; 27
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	88 bb       	out	0x18, r24	; 24
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	85 bb       	out	0x15, r24	; 21
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	82 bb       	out	0x12, r24	; 18
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret
     fc0:	61 11       	cpse	r22, r1
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <DIO_u8SetPortValue+0x60>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	49 f0       	breq	.+18     	; 0xfda <DIO_u8SetPortValue+0x4e>
     fc8:	28 f0       	brcs	.+10     	; 0xfd4 <DIO_u8SetPortValue+0x48>
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	49 f0       	breq	.+18     	; 0xfe0 <DIO_u8SetPortValue+0x54>
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	51 f0       	breq	.+20     	; 0xfe6 <DIO_u8SetPortValue+0x5a>
     fd2:	22 c0       	rjmp	.+68     	; 0x1018 <DIO_u8SetPortValue+0x8c>
     fd4:	1b ba       	out	0x1b, r1	; 27
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret
     fda:	18 ba       	out	0x18, r1	; 24
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	08 95       	ret
     fe0:	15 ba       	out	0x15, r1	; 21
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	08 95       	ret
     fe6:	12 ba       	out	0x12, r1	; 18
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	49 f0       	breq	.+18     	; 0x1002 <DIO_u8SetPortValue+0x76>
     ff0:	28 f0       	brcs	.+10     	; 0xffc <DIO_u8SetPortValue+0x70>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	49 f0       	breq	.+18     	; 0x1008 <DIO_u8SetPortValue+0x7c>
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	51 f0       	breq	.+20     	; 0x100e <DIO_u8SetPortValue+0x82>
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <DIO_u8SetPortValue+0x90>
     ffc:	6b bb       	out	0x1b, r22	; 27
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	08 95       	ret
    1002:	68 bb       	out	0x18, r22	; 24
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	08 95       	ret
    1008:	65 bb       	out	0x15, r22	; 21
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret
    100e:	62 bb       	out	0x12, r22	; 18
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	08 95       	ret
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	08 95       	ret

00001020 <GIE_Enable>:
    1020:	8f b7       	in	r24, 0x3f	; 63
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	8f bf       	out	0x3f, r24	; 63
    1026:	08 95       	ret

00001028 <ICU_VoidTimer1ICUInterrupt>:
		Ints = 0;
	}
}

void ICU_VoidTimer1ICUInterrupt(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
	if (Ints == 0)
    102c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Ints>
    1030:	81 11       	cpse	r24, r1
    1032:	13 c0       	rjmp	.+38     	; 0x105a <ICU_VoidTimer1ICUInterrupt+0x32>
	{
		OVF_Counter = 0;
    1034:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <OVF_Counter>
    1038:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <OVF_Counter+0x1>
    103c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <OVF_Counter+0x2>
    1040:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <OVF_Counter+0x3>
		TIMERS_TCNT1DATA = 0x00U;
    1044:	1d bc       	out	0x2d, r1	; 45
    1046:	1c bc       	out	0x2c, r1	; 44
		CLR_BIT(TIMERS_TCCR1B, TCCR1B_ICES1);	// falling edge
    1048:	8e b5       	in	r24, 0x2e	; 46
    104a:	8f 7b       	andi	r24, 0xBF	; 191
    104c:	8e bd       	out	0x2e, r24	; 46
		Ints++;
    104e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Ints>
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Ints>
    1058:	54 c0       	rjmp	.+168    	; 0x1102 <ICU_VoidTimer1ICUInterrupt+0xda>
	}
	else if (Ints == 1)
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	51 f5       	brne	.+84     	; 0x10b2 <ICU_VoidTimer1ICUInterrupt+0x8a>
	{
		ICU_OnCounter = TIMERS_ICR1DATA + (OVF_Counter * 65536U);
    105e:	26 b5       	in	r18, 0x26	; 38
    1060:	37 b5       	in	r19, 0x27	; 39
    1062:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <OVF_Counter>
    1066:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <OVF_Counter+0x1>
    106a:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <OVF_Counter+0x2>
    106e:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <OVF_Counter+0x3>
    1072:	dc 01       	movw	r26, r24
    1074:	99 27       	eor	r25, r25
    1076:	88 27       	eor	r24, r24
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	a1 1d       	adc	r26, r1
    107e:	b1 1d       	adc	r27, r1
    1080:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <ICU_OnCounter>
    1084:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <ICU_OnCounter+0x1>
    1088:	a0 93 9d 00 	sts	0x009D, r26	; 0x80009d <ICU_OnCounter+0x2>
    108c:	b0 93 9e 00 	sts	0x009E, r27	; 0x80009e <ICU_OnCounter+0x3>
    1090:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <ICU_OnCounter+0x4>
    1094:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <ICU_OnCounter+0x5>
    1098:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <ICU_OnCounter+0x6>
    109c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <ICU_OnCounter+0x7>
		SET_BIT(TIMERS_TCCR1B, TCCR1B_ICES1);	// Rising Edge
    10a0:	8e b5       	in	r24, 0x2e	; 46
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	8e bd       	out	0x2e, r24	; 46
		Ints++;
    10a6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Ints>
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Ints>
    10b0:	28 c0       	rjmp	.+80     	; 0x1102 <ICU_VoidTimer1ICUInterrupt+0xda>
	}
	else if (Ints == 2)
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	31 f5       	brne	.+76     	; 0x1102 <ICU_VoidTimer1ICUInterrupt+0xda>
	{
		ICU_TotalCounter = TIMERS_ICR1DATA + (OVF_Counter * 65536U);
    10b6:	26 b5       	in	r18, 0x26	; 38
    10b8:	37 b5       	in	r19, 0x27	; 39
    10ba:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <OVF_Counter>
    10be:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <OVF_Counter+0x1>
    10c2:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <OVF_Counter+0x2>
    10c6:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <OVF_Counter+0x3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	99 27       	eor	r25, r25
    10ce:	88 27       	eor	r24, r24
    10d0:	82 0f       	add	r24, r18
    10d2:	93 1f       	adc	r25, r19
    10d4:	a1 1d       	adc	r26, r1
    10d6:	b1 1d       	adc	r27, r1
    10d8:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <ICU_TotalCounter>
    10dc:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <ICU_TotalCounter+0x1>
    10e0:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <ICU_TotalCounter+0x2>
    10e4:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <ICU_TotalCounter+0x3>
    10e8:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <ICU_TotalCounter+0x4>
    10ec:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <ICU_TotalCounter+0x5>
    10f0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <ICU_TotalCounter+0x6>
    10f4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <ICU_TotalCounter+0x7>
		Ints = 0;
    10f8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Ints>
		Done = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Done>
	}
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <ICU_VoidTimer1OVFInterrupt>:
void ICU_VoidTimer1OVFInterrupt(void)
{
	OVF_Counter++;
    1108:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <OVF_Counter>
    110c:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <OVF_Counter+0x1>
    1110:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <OVF_Counter+0x2>
    1114:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <OVF_Counter+0x3>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	a1 1d       	adc	r26, r1
    111c:	b1 1d       	adc	r27, r1
    111e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <OVF_Counter>
    1122:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <OVF_Counter+0x1>
    1126:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <OVF_Counter+0x2>
    112a:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <OVF_Counter+0x3>
    112e:	08 95       	ret

00001130 <ICU_VoidTimer1Init>:
		TIMER1_ICU_RISING
		*/
		#if TIMER1_ICU_MODE == TIMER1_ICU_FALLING
			CLR_BIT(TIMERS_TCCR1B, TCCR1B_ICES1);
		#elif TIMER1_ICU_MODE == TIMER1_ICU_RISING
			SET_BIT(TIMERS_TCCR1B, TCCR1B_ICES1);
    1130:	8e b5       	in	r24, 0x2e	; 46
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	8e bd       	out	0x2e, r24	; 46
		#endif
	#endif
	
	/* Enable ICU Interrupt */
	SET_BIT(TIMERS_TIMSK, TIMSK_TICIE1);
    1136:	89 b7       	in	r24, 0x39	; 57
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	89 bf       	out	0x39, r24	; 57
	
	/* Clear Flag of pending Interrupts*/
	SET_BIT(TIMERS_TIFR, TIFR_ICF1);
    113c:	88 b7       	in	r24, 0x38	; 56
    113e:	80 62       	ori	r24, 0x20	; 32
    1140:	88 bf       	out	0x38, r24	; 56
	
	/* Clearing Both Timer(TCNT1) and Input Capture (ICR1) Registers  */
	TIMERS_TCNT1DATA = 0x00U;			
    1142:	1d bc       	out	0x2d, r1	; 45
    1144:	1c bc       	out	0x2c, r1	; 44
    1146:	08 95       	ret

00001148 <ICU_VoidTimer1SignalCapture>:
}

void ICU_VoidTimer1SignalCapture(f32* copy_Ptrf32Duty, f32* copy_Ptrf32Frequency, f32* copy_Ptrf32Periodic_Time, f32* copy_Ptrf32High_Time, f32* copy_Ptrf32Low_Time)
{
    1148:	2f 92       	push	r2
    114a:	3f 92       	push	r3
    114c:	4f 92       	push	r4
    114e:	5f 92       	push	r5
    1150:	6f 92       	push	r6
    1152:	7f 92       	push	r7
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	6c 01       	movw	r12, r24
    116e:	eb 01       	movw	r28, r22
    1170:	7a 01       	movw	r14, r20
    1172:	19 01       	movw	r2, r18
	Frequency
	Periodic Time
	High Time
	Low Time
	*/
	DIO_u8SetPinDirection(DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT);		/* ICP1 Pin as Input */
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	66 e0       	ldi	r22, 0x06	; 6
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	0e 94 8a 06 	call	0xd14	; 0xd14 <DIO_u8SetPinDirection>
	SET_BIT(TIMERS_TCCR1B, TCCR1B_ICES1);							/* Set Detection to Rising Edge */
    117e:	8e b5       	in	r24, 0x2e	; 46
    1180:	80 64       	ori	r24, 0x40	; 64
    1182:	8e bd       	out	0x2e, r24	; 46
	
	TIMERS_u8CallBackFunction(ICU_VoidTimer1ICUInterrupt, ICU1);
    1184:	6e e1       	ldi	r22, 0x1E	; 30
    1186:	84 e1       	ldi	r24, 0x14	; 20
    1188:	98 e0       	ldi	r25, 0x08	; 8
    118a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TIMERS_u8CallBackFunction>
	TIMERS_u8CallBackFunction(ICU_VoidTimer1OVFInterrupt, OVF1);
    118e:	6c e3       	ldi	r22, 0x3C	; 60
    1190:	84 e8       	ldi	r24, 0x84	; 132
    1192:	98 e0       	ldi	r25, 0x08	; 8
    1194:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TIMERS_u8CallBackFunction>
	
	if (Done == 1)
    1198:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Done>
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <ICU_VoidTimer1SignalCapture+0x5a>
    11a0:	74 c0       	rjmp	.+232    	; 0x128a <ICU_VoidTimer1SignalCapture+0x142>
	{
		*copy_Ptrf32Duty = ( ((f32)ICU_OnCounter / (f32)ICU_TotalCounter )) * 100;
    11a2:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <ICU_OnCounter>
    11a6:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <ICU_OnCounter+0x1>
    11aa:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <ICU_OnCounter+0x2>
    11ae:	50 91 9e 00 	lds	r21, 0x009E	; 0x80009e <ICU_OnCounter+0x3>
    11b2:	60 91 9f 00 	lds	r22, 0x009F	; 0x80009f <ICU_OnCounter+0x4>
    11b6:	70 91 a0 00 	lds	r23, 0x00A0	; 0x8000a0 <ICU_OnCounter+0x5>
    11ba:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <ICU_OnCounter+0x6>
    11be:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <ICU_OnCounter+0x7>
    11c2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__floatundisf>
    11c6:	2b 01       	movw	r4, r22
    11c8:	3c 01       	movw	r6, r24
    11ca:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <ICU_TotalCounter>
    11ce:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <ICU_TotalCounter+0x1>
    11d2:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <ICU_TotalCounter+0x2>
    11d6:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <ICU_TotalCounter+0x3>
    11da:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <ICU_TotalCounter+0x4>
    11de:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <ICU_TotalCounter+0x5>
    11e2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <ICU_TotalCounter+0x6>
    11e6:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <ICU_TotalCounter+0x7>
    11ea:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__floatundisf>
    11ee:	4b 01       	movw	r8, r22
    11f0:	5c 01       	movw	r10, r24
    11f2:	9b 01       	movw	r18, r22
    11f4:	ac 01       	movw	r20, r24
    11f6:	c3 01       	movw	r24, r6
    11f8:	b2 01       	movw	r22, r4
    11fa:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__divsf3>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	48 ec       	ldi	r20, 0xC8	; 200
    1204:	52 e4       	ldi	r21, 0x42	; 66
    1206:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
    120a:	f6 01       	movw	r30, r12
    120c:	60 83       	st	Z, r22
    120e:	71 83       	std	Z+1, r23	; 0x01
    1210:	82 83       	std	Z+2, r24	; 0x02
    1212:	93 83       	std	Z+3, r25	; 0x03
		*copy_Ptrf32Periodic_Time = (((f32)ICU_TotalCounter) * ((f32)local_u16PS/(f32)F_CPU));
    1214:	2d eb       	ldi	r18, 0xBD	; 189
    1216:	37 e3       	ldi	r19, 0x37	; 55
    1218:	46 e8       	ldi	r20, 0x86	; 134
    121a:	53 e3       	ldi	r21, 0x33	; 51
    121c:	c5 01       	movw	r24, r10
    121e:	b4 01       	movw	r22, r8
    1220:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
    1224:	9b 01       	movw	r18, r22
    1226:	ac 01       	movw	r20, r24
    1228:	f7 01       	movw	r30, r14
    122a:	60 83       	st	Z, r22
    122c:	71 83       	std	Z+1, r23	; 0x01
    122e:	82 83       	std	Z+2, r24	; 0x02
    1230:	93 83       	std	Z+3, r25	; 0x03
		*copy_Ptrf32Frequency =  ((f32)1 / *copy_Ptrf32Periodic_Time);
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e8       	ldi	r24, 0x80	; 128
    1238:	9f e3       	ldi	r25, 0x3F	; 63
    123a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__divsf3>
    123e:	68 83       	st	Y, r22
    1240:	79 83       	std	Y+1, r23	; 0x01
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	9b 83       	std	Y+3, r25	; 0x03
		*copy_Ptrf32High_Time = ( (f32)ICU_OnCounter * ((f32)local_u16PS/(f32)F_CPU) );
    1246:	2d eb       	ldi	r18, 0xBD	; 189
    1248:	37 e3       	ldi	r19, 0x37	; 55
    124a:	46 e8       	ldi	r20, 0x86	; 134
    124c:	53 e3       	ldi	r21, 0x33	; 51
    124e:	c3 01       	movw	r24, r6
    1250:	b2 01       	movw	r22, r4
    1252:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
    1256:	f1 01       	movw	r30, r2
    1258:	60 83       	st	Z, r22
    125a:	71 83       	std	Z+1, r23	; 0x01
    125c:	82 83       	std	Z+2, r24	; 0x02
    125e:	93 83       	std	Z+3, r25	; 0x03
		*copy_Ptrf32Low_Time = ((f32)ICU_TotalCounter - (f32)ICU_OnCounter) * ((f32)local_u16PS/(f32)F_CPU);
    1260:	a3 01       	movw	r20, r6
    1262:	92 01       	movw	r18, r4
    1264:	c5 01       	movw	r24, r10
    1266:	b4 01       	movw	r22, r8
    1268:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__subsf3>
    126c:	2d eb       	ldi	r18, 0xBD	; 189
    126e:	37 e3       	ldi	r19, 0x37	; 55
    1270:	46 e8       	ldi	r20, 0x86	; 134
    1272:	53 e3       	ldi	r21, 0x33	; 51
    1274:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
    1278:	f8 01       	movw	r30, r16
    127a:	60 83       	st	Z, r22
    127c:	71 83       	std	Z+1, r23	; 0x01
    127e:	82 83       	std	Z+2, r24	; 0x02
    1280:	93 83       	std	Z+3, r25	; 0x03
		Done = 0;
    1282:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <Done>
		Ints = 0;
    1286:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Ints>
	}
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	3f 90       	pop	r3
    12ac:	2f 90       	pop	r2
    12ae:	08 95       	ret

000012b0 <TIMER0_VoidInit>:
	else
	{
		local_u8ErrorState = NOK;
	}
	return (local_u8ErrorState);
}
    12b0:	83 b7       	in	r24, 0x33	; 51
    12b2:	80 64       	ori	r24, 0x40	; 64
    12b4:	83 bf       	out	0x33, r24	; 51
    12b6:	83 b7       	in	r24, 0x33	; 51
    12b8:	88 60       	ori	r24, 0x08	; 8
    12ba:	83 bf       	out	0x33, r24	; 51
    12bc:	88 ec       	ldi	r24, 0xC8	; 200
    12be:	8c bf       	out	0x3c, r24	; 60
    12c0:	89 b7       	in	r24, 0x39	; 57
    12c2:	82 60       	ori	r24, 0x02	; 2
    12c4:	89 bf       	out	0x39, r24	; 57
    12c6:	89 b7       	in	r24, 0x39	; 57
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	89 bf       	out	0x39, r24	; 57
    12cc:	83 b7       	in	r24, 0x33	; 51
    12ce:	8f 7e       	andi	r24, 0xEF	; 239
    12d0:	83 bf       	out	0x33, r24	; 51
    12d2:	83 b7       	in	r24, 0x33	; 51
    12d4:	80 62       	ori	r24, 0x20	; 32
    12d6:	83 bf       	out	0x33, r24	; 51
    12d8:	83 b7       	in	r24, 0x33	; 51
    12da:	88 7f       	andi	r24, 0xF8	; 248
    12dc:	83 bf       	out	0x33, r24	; 51
    12de:	83 b7       	in	r24, 0x33	; 51
    12e0:	85 60       	ori	r24, 0x05	; 5
    12e2:	83 bf       	out	0x33, r24	; 51
    12e4:	08 95       	ret

000012e6 <TIMER1_VoidInit>:
    12e6:	8f b5       	in	r24, 0x2f	; 47
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	8f bd       	out	0x2f, r24	; 47
    12ec:	8f b5       	in	r24, 0x2f	; 47
    12ee:	8d 7f       	andi	r24, 0xFD	; 253
    12f0:	8f bd       	out	0x2f, r24	; 47
    12f2:	8e b5       	in	r24, 0x2e	; 46
    12f4:	87 7f       	andi	r24, 0xF7	; 247
    12f6:	8e bd       	out	0x2e, r24	; 46
    12f8:	8e b5       	in	r24, 0x2e	; 46
    12fa:	8f 7e       	andi	r24, 0xEF	; 239
    12fc:	8e bd       	out	0x2e, r24	; 46
    12fe:	89 b7       	in	r24, 0x39	; 57
    1300:	84 60       	ori	r24, 0x04	; 4
    1302:	89 bf       	out	0x39, r24	; 57
    1304:	8f b5       	in	r24, 0x2f	; 47
    1306:	8f 7b       	andi	r24, 0xBF	; 191
    1308:	8f bd       	out	0x2f, r24	; 47
    130a:	8f b5       	in	r24, 0x2f	; 47
    130c:	8f 77       	andi	r24, 0x7F	; 127
    130e:	8f bd       	out	0x2f, r24	; 47
    1310:	8f b5       	in	r24, 0x2f	; 47
    1312:	8f 7e       	andi	r24, 0xEF	; 239
    1314:	8f bd       	out	0x2f, r24	; 47
    1316:	8f b5       	in	r24, 0x2f	; 47
    1318:	8f 7d       	andi	r24, 0xDF	; 223
    131a:	8f bd       	out	0x2f, r24	; 47
    131c:	8e b5       	in	r24, 0x2e	; 46
    131e:	88 7f       	andi	r24, 0xF8	; 248
    1320:	8e bd       	out	0x2e, r24	; 46
    1322:	8e b5       	in	r24, 0x2e	; 46
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	8e bd       	out	0x2e, r24	; 46
    1328:	08 95       	ret

0000132a <TIMER2_VoidInit>:
    132a:	85 b5       	in	r24, 0x25	; 37
    132c:	8f 7b       	andi	r24, 0xBF	; 191
    132e:	85 bd       	out	0x25, r24	; 37
    1330:	85 b5       	in	r24, 0x25	; 37
    1332:	88 60       	ori	r24, 0x08	; 8
    1334:	85 bd       	out	0x25, r24	; 37
    1336:	8a ef       	ldi	r24, 0xFA	; 250
    1338:	83 bd       	out	0x23, r24	; 35
    133a:	89 b7       	in	r24, 0x39	; 57
    133c:	80 68       	ori	r24, 0x80	; 128
    133e:	89 bf       	out	0x39, r24	; 57
    1340:	85 b5       	in	r24, 0x25	; 37
    1342:	8f 7e       	andi	r24, 0xEF	; 239
    1344:	85 bd       	out	0x25, r24	; 37
    1346:	85 b5       	in	r24, 0x25	; 37
    1348:	8f 7d       	andi	r24, 0xDF	; 223
    134a:	85 bd       	out	0x25, r24	; 37
    134c:	85 b5       	in	r24, 0x25	; 37
    134e:	88 7f       	andi	r24, 0xF8	; 248
    1350:	85 bd       	out	0x25, r24	; 37
    1352:	85 b5       	in	r24, 0x25	; 37
    1354:	84 60       	ori	r24, 0x04	; 4
    1356:	85 bd       	out	0x25, r24	; 37
    1358:	08 95       	ret

0000135a <TIMER0_voidUpdateCompareValue>:
    135a:	8c bf       	out	0x3c, r24	; 60
    135c:	08 95       	ret

0000135e <TIMER2_VoidDelayms>:
    135e:	ac 01       	movw	r20, r24
    1360:	85 b5       	in	r24, 0x25	; 37
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	85 bd       	out	0x25, r24	; 37
    1366:	89 b7       	in	r24, 0x39	; 57
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	89 bf       	out	0x39, r24	; 57
    136c:	8a ef       	ldi	r24, 0xFA	; 250
    136e:	83 bd       	out	0x23, r24	; 35
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <TIMER2_VoidDelayms+0x2a>
    1376:	14 bc       	out	0x24, r1	; 36
    1378:	08 b6       	in	r0, 0x38	; 56
    137a:	07 fe       	sbrs	r0, 7
    137c:	fd cf       	rjmp	.-6      	; 0x1378 <TIMER2_VoidDelayms+0x1a>
    137e:	98 b7       	in	r25, 0x38	; 56
    1380:	90 68       	ori	r25, 0x80	; 128
    1382:	98 bf       	out	0x38, r25	; 56
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	24 17       	cp	r18, r20
    138a:	35 07       	cpc	r19, r21
    138c:	a0 f3       	brcs	.-24     	; 0x1376 <TIMER2_VoidDelayms+0x18>
    138e:	85 b5       	in	r24, 0x25	; 37
    1390:	88 7f       	andi	r24, 0xF8	; 248
    1392:	85 bd       	out	0x25, r24	; 37
    1394:	85 b5       	in	r24, 0x25	; 37
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	85 bd       	out	0x25, r24	; 37
    139a:	8a ef       	ldi	r24, 0xFA	; 250
    139c:	83 bd       	out	0x23, r24	; 35
    139e:	89 b7       	in	r24, 0x39	; 57
    13a0:	80 68       	ori	r24, 0x80	; 128
    13a2:	89 bf       	out	0x39, r24	; 57
    13a4:	08 95       	ret

000013a6 <TIMERS_u8CallBackFunction>:
    13a6:	46 2f       	mov	r20, r22
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	fa 01       	movw	r30, r20
    13ac:	3a 97       	sbiw	r30, 0x0a	; 10
    13ae:	e7 34       	cpi	r30, 0x47	; 71
    13b0:	f1 05       	cpc	r31, r1
    13b2:	a0 f5       	brcc	.+104    	; 0x141c <TIMERS_u8CallBackFunction+0x76>
    13b4:	eb 57       	subi	r30, 0x7B	; 123
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__tablejump2__>
    13bc:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <TIMER2_CTC_ptrFunction+0x1>
    13c0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <TIMER2_CTC_ptrFunction>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	08 95       	ret
    13c8:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <TIMER2_OVF_ptrFunction+0x1>
    13cc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <TIMER2_OVF_ptrFunction>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
    13d4:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <TIMER1_ICU_ptrFunction+0x1>
    13d8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <TIMER1_ICU_ptrFunction>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	08 95       	ret
    13e0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <TIMER1A_CTC_ptrFunction+0x1>
    13e4:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <TIMER1A_CTC_ptrFunction>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret
    13ec:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <TIMER1B_CTC_ptrFunction+0x1>
    13f0:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <TIMER1B_CTC_ptrFunction>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	08 95       	ret
    13f8:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <TIMER1_OVF_ptrFunction+0x1>
    13fc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <TIMER1_OVF_ptrFunction>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	08 95       	ret
    1404:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <TIMER0_CTC_ptrFunction+0x1>
    1408:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <TIMER0_CTC_ptrFunction>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret
    1410:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <TIMER0_OVF_ptrFunction+0x1>
    1414:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <TIMER0_OVF_ptrFunction>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	08 95       	ret
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	08 95       	ret

00001420 <TIMER0_u8PWMDutyCycle>:
    1420:	85 36       	cpi	r24, 0x65	; 101
    1422:	c8 f4       	brcc	.+50     	; 0x1456 <TIMER0_u8PWMDutyCycle+0x36>
    1424:	68 2f       	mov	r22, r24
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 83 0c 	call	0x1906	; 0x1906 <__floatunsisf>
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	48 ec       	ldi	r20, 0xC8	; 200
    1436:	52 e4       	ldi	r21, 0x42	; 66
    1438:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__divsf3>
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	53 e4       	ldi	r21, 0x43	; 67
    1444:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__mulsf3>
    1448:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fixunssfsi>
    144c:	86 2f       	mov	r24, r22
    144e:	0e 94 ad 09 	call	0x135a	; 0x135a <TIMER0_voidUpdateCompareValue>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	08 95       	ret
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	08 95       	ret

0000145a <__vector_4>:


/********** Interrupt Vector Functions **********/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)	// Timer/Counter2 Compare Match
{
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
	if(TIMER2_CTC_ptrFunction != NULL)
    147c:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <TIMER2_CTC_ptrFunction>
    1480:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <TIMER2_CTC_ptrFunction+0x1>
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	09 f0       	breq	.+2      	; 0x148a <__vector_4+0x30>
	{
		TIMER2_CTC_ptrFunction();
    1488:	09 95       	icall
	}
	else
	{}
}
    148a:	ff 91       	pop	r31
    148c:	ef 91       	pop	r30
    148e:	bf 91       	pop	r27
    1490:	af 91       	pop	r26
    1492:	9f 91       	pop	r25
    1494:	8f 91       	pop	r24
    1496:	7f 91       	pop	r23
    1498:	6f 91       	pop	r22
    149a:	5f 91       	pop	r21
    149c:	4f 91       	pop	r20
    149e:	3f 91       	pop	r19
    14a0:	2f 91       	pop	r18
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)	// Timer/Counter2 Overflow
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
	if(TIMER2_OVF_ptrFunction != NULL)
    14ce:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <TIMER2_OVF_ptrFunction>
    14d2:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <TIMER2_OVF_ptrFunction+0x1>
    14d6:	30 97       	sbiw	r30, 0x00	; 0
    14d8:	09 f0       	breq	.+2      	; 0x14dc <__vector_5+0x30>
	{
		TIMER2_OVF_ptrFunction();
    14da:	09 95       	icall
	}
	else
	{}
}
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)	// Timer/Counter1 Capture Event
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
	if(TIMER1_ICU_ptrFunction != NULL)
    1520:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <TIMER1_ICU_ptrFunction>
    1524:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <TIMER1_ICU_ptrFunction+0x1>
    1528:	30 97       	sbiw	r30, 0x00	; 0
    152a:	09 f0       	breq	.+2      	; 0x152e <__vector_6+0x30>
	{
		TIMER1_ICU_ptrFunction();
    152c:	09 95       	icall
	}
	else
	{}
}
    152e:	ff 91       	pop	r31
    1530:	ef 91       	pop	r30
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)	// Timer/Counter1 Compare Match A
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if(TIMER1A_CTC_ptrFunction != NULL)
    1572:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <TIMER1A_CTC_ptrFunction>
    1576:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <TIMER1A_CTC_ptrFunction+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_7+0x30>
	{
		TIMER1A_CTC_ptrFunction();
    157e:	09 95       	icall
	}
	else
	{}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)	// Timer/Counter1 Compare Match B
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
	if(TIMER1B_CTC_ptrFunction != NULL)
    15c4:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <TIMER1B_CTC_ptrFunction>
    15c8:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <TIMER1B_CTC_ptrFunction+0x1>
    15cc:	30 97       	sbiw	r30, 0x00	; 0
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <__vector_8+0x30>
	{
		TIMER1B_CTC_ptrFunction();
    15d0:	09 95       	icall
	}
	else
	{}
}
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)	// Timer/Counter1 Overflow
{
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	4f 93       	push	r20
    1604:	5f 93       	push	r21
    1606:	6f 93       	push	r22
    1608:	7f 93       	push	r23
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
	if(TIMER1_OVF_ptrFunction != NULL)
    1616:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <TIMER1_OVF_ptrFunction>
    161a:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <TIMER1_OVF_ptrFunction+0x1>
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	09 f0       	breq	.+2      	; 0x1624 <__vector_9+0x30>
	{
		TIMER1_OVF_ptrFunction();
    1622:	09 95       	icall
	}
	else
	{}
}
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)	// Timer/Counter0 Compare Match
{
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
	if(TIMER0_CTC_ptrFunction != NULL)
    1668:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <TIMER0_CTC_ptrFunction>
    166c:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <TIMER0_CTC_ptrFunction+0x1>
    1670:	30 97       	sbiw	r30, 0x00	; 0
    1672:	09 f0       	breq	.+2      	; 0x1676 <__vector_10+0x30>
	{
		TIMER0_CTC_ptrFunction();
    1674:	09 95       	icall
	}
	else
	{}
}
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)	// Timer/Counter0 Overflow
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
	if(TIMER0_OVF_ptrFunction != NULL)
    16ba:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <TIMER0_OVF_ptrFunction>
    16be:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <TIMER0_OVF_ptrFunction+0x1>
    16c2:	30 97       	sbiw	r30, 0x00	; 0
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__vector_11+0x30>
	{
		TIMER0_OVF_ptrFunction();
    16c6:	09 95       	icall
	}
	else
	{}
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__subsf3>:
    16ea:	50 58       	subi	r21, 0x80	; 128

000016ec <__addsf3>:
    16ec:	bb 27       	eor	r27, r27
    16ee:	aa 27       	eor	r26, r26
    16f0:	0e 94 8d 0b 	call	0x171a	; 0x171a <__addsf3x>
    16f4:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__fp_round>
    16f8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__fp_pscA>
    16fc:	38 f0       	brcs	.+14     	; 0x170c <__addsf3+0x20>
    16fe:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_pscB>
    1702:	20 f0       	brcs	.+8      	; 0x170c <__addsf3+0x20>
    1704:	39 f4       	brne	.+14     	; 0x1714 <__addsf3+0x28>
    1706:	9f 3f       	cpi	r25, 0xFF	; 255
    1708:	19 f4       	brne	.+6      	; 0x1710 <__addsf3+0x24>
    170a:	26 f4       	brtc	.+8      	; 0x1714 <__addsf3+0x28>
    170c:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_nan>
    1710:	0e f4       	brtc	.+2      	; 0x1714 <__addsf3+0x28>
    1712:	e0 95       	com	r30
    1714:	e7 fb       	bst	r30, 7
    1716:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_inf>

0000171a <__addsf3x>:
    171a:	e9 2f       	mov	r30, r25
    171c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_split3>
    1720:	58 f3       	brcs	.-42     	; 0x16f8 <__addsf3+0xc>
    1722:	ba 17       	cp	r27, r26
    1724:	62 07       	cpc	r22, r18
    1726:	73 07       	cpc	r23, r19
    1728:	84 07       	cpc	r24, r20
    172a:	95 07       	cpc	r25, r21
    172c:	20 f0       	brcs	.+8      	; 0x1736 <__addsf3x+0x1c>
    172e:	79 f4       	brne	.+30     	; 0x174e <__addsf3x+0x34>
    1730:	a6 f5       	brtc	.+104    	; 0x179a <__addsf3x+0x80>
    1732:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__fp_zero>
    1736:	0e f4       	brtc	.+2      	; 0x173a <__addsf3x+0x20>
    1738:	e0 95       	com	r30
    173a:	0b 2e       	mov	r0, r27
    173c:	ba 2f       	mov	r27, r26
    173e:	a0 2d       	mov	r26, r0
    1740:	0b 01       	movw	r0, r22
    1742:	b9 01       	movw	r22, r18
    1744:	90 01       	movw	r18, r0
    1746:	0c 01       	movw	r0, r24
    1748:	ca 01       	movw	r24, r20
    174a:	a0 01       	movw	r20, r0
    174c:	11 24       	eor	r1, r1
    174e:	ff 27       	eor	r31, r31
    1750:	59 1b       	sub	r21, r25
    1752:	99 f0       	breq	.+38     	; 0x177a <__addsf3x+0x60>
    1754:	59 3f       	cpi	r21, 0xF9	; 249
    1756:	50 f4       	brcc	.+20     	; 0x176c <__addsf3x+0x52>
    1758:	50 3e       	cpi	r21, 0xE0	; 224
    175a:	68 f1       	brcs	.+90     	; 0x17b6 <__addsf3x+0x9c>
    175c:	1a 16       	cp	r1, r26
    175e:	f0 40       	sbci	r31, 0x00	; 0
    1760:	a2 2f       	mov	r26, r18
    1762:	23 2f       	mov	r18, r19
    1764:	34 2f       	mov	r19, r20
    1766:	44 27       	eor	r20, r20
    1768:	58 5f       	subi	r21, 0xF8	; 248
    176a:	f3 cf       	rjmp	.-26     	; 0x1752 <__addsf3x+0x38>
    176c:	46 95       	lsr	r20
    176e:	37 95       	ror	r19
    1770:	27 95       	ror	r18
    1772:	a7 95       	ror	r26
    1774:	f0 40       	sbci	r31, 0x00	; 0
    1776:	53 95       	inc	r21
    1778:	c9 f7       	brne	.-14     	; 0x176c <__addsf3x+0x52>
    177a:	7e f4       	brtc	.+30     	; 0x179a <__addsf3x+0x80>
    177c:	1f 16       	cp	r1, r31
    177e:	ba 0b       	sbc	r27, r26
    1780:	62 0b       	sbc	r22, r18
    1782:	73 0b       	sbc	r23, r19
    1784:	84 0b       	sbc	r24, r20
    1786:	ba f0       	brmi	.+46     	; 0x17b6 <__addsf3x+0x9c>
    1788:	91 50       	subi	r25, 0x01	; 1
    178a:	a1 f0       	breq	.+40     	; 0x17b4 <__addsf3x+0x9a>
    178c:	ff 0f       	add	r31, r31
    178e:	bb 1f       	adc	r27, r27
    1790:	66 1f       	adc	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	c2 f7       	brpl	.-16     	; 0x1788 <__addsf3x+0x6e>
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <__addsf3x+0x9c>
    179a:	ba 0f       	add	r27, r26
    179c:	62 1f       	adc	r22, r18
    179e:	73 1f       	adc	r23, r19
    17a0:	84 1f       	adc	r24, r20
    17a2:	48 f4       	brcc	.+18     	; 0x17b6 <__addsf3x+0x9c>
    17a4:	87 95       	ror	r24
    17a6:	77 95       	ror	r23
    17a8:	67 95       	ror	r22
    17aa:	b7 95       	ror	r27
    17ac:	f7 95       	ror	r31
    17ae:	9e 3f       	cpi	r25, 0xFE	; 254
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <__addsf3x+0x9a>
    17b2:	b0 cf       	rjmp	.-160    	; 0x1714 <__addsf3+0x28>
    17b4:	93 95       	inc	r25
    17b6:	88 0f       	add	r24, r24
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <__addsf3x+0xa2>
    17ba:	99 27       	eor	r25, r25
    17bc:	ee 0f       	add	r30, r30
    17be:	97 95       	ror	r25
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret

000017c4 <__divsf3>:
    17c4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__divsf3x>
    17c8:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__fp_round>
    17cc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_pscB>
    17d0:	58 f0       	brcs	.+22     	; 0x17e8 <__divsf3+0x24>
    17d2:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__fp_pscA>
    17d6:	40 f0       	brcs	.+16     	; 0x17e8 <__divsf3+0x24>
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <__divsf3+0x20>
    17da:	5f 3f       	cpi	r21, 0xFF	; 255
    17dc:	29 f0       	breq	.+10     	; 0x17e8 <__divsf3+0x24>
    17de:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_inf>
    17e2:	51 11       	cpse	r21, r1
    17e4:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_szero>
    17e8:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_nan>

000017ec <__divsf3x>:
    17ec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_split3>
    17f0:	68 f3       	brcs	.-38     	; 0x17cc <__divsf3+0x8>

000017f2 <__divsf3_pse>:
    17f2:	99 23       	and	r25, r25
    17f4:	b1 f3       	breq	.-20     	; 0x17e2 <__divsf3+0x1e>
    17f6:	55 23       	and	r21, r21
    17f8:	91 f3       	breq	.-28     	; 0x17de <__divsf3+0x1a>
    17fa:	95 1b       	sub	r25, r21
    17fc:	55 0b       	sbc	r21, r21
    17fe:	bb 27       	eor	r27, r27
    1800:	aa 27       	eor	r26, r26
    1802:	62 17       	cp	r22, r18
    1804:	73 07       	cpc	r23, r19
    1806:	84 07       	cpc	r24, r20
    1808:	38 f0       	brcs	.+14     	; 0x1818 <__divsf3_pse+0x26>
    180a:	9f 5f       	subi	r25, 0xFF	; 255
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	44 1f       	adc	r20, r20
    1814:	aa 1f       	adc	r26, r26
    1816:	a9 f3       	breq	.-22     	; 0x1802 <__divsf3_pse+0x10>
    1818:	35 d0       	rcall	.+106    	; 0x1884 <__divsf3_pse+0x92>
    181a:	0e 2e       	mov	r0, r30
    181c:	3a f0       	brmi	.+14     	; 0x182c <__divsf3_pse+0x3a>
    181e:	e0 e8       	ldi	r30, 0x80	; 128
    1820:	32 d0       	rcall	.+100    	; 0x1886 <__divsf3_pse+0x94>
    1822:	91 50       	subi	r25, 0x01	; 1
    1824:	50 40       	sbci	r21, 0x00	; 0
    1826:	e6 95       	lsr	r30
    1828:	00 1c       	adc	r0, r0
    182a:	ca f7       	brpl	.-14     	; 0x181e <__divsf3_pse+0x2c>
    182c:	2b d0       	rcall	.+86     	; 0x1884 <__divsf3_pse+0x92>
    182e:	fe 2f       	mov	r31, r30
    1830:	29 d0       	rcall	.+82     	; 0x1884 <__divsf3_pse+0x92>
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	bb 1f       	adc	r27, r27
    183a:	26 17       	cp	r18, r22
    183c:	37 07       	cpc	r19, r23
    183e:	48 07       	cpc	r20, r24
    1840:	ab 07       	cpc	r26, r27
    1842:	b0 e8       	ldi	r27, 0x80	; 128
    1844:	09 f0       	breq	.+2      	; 0x1848 <__divsf3_pse+0x56>
    1846:	bb 0b       	sbc	r27, r27
    1848:	80 2d       	mov	r24, r0
    184a:	bf 01       	movw	r22, r30
    184c:	ff 27       	eor	r31, r31
    184e:	93 58       	subi	r25, 0x83	; 131
    1850:	5f 4f       	sbci	r21, 0xFF	; 255
    1852:	3a f0       	brmi	.+14     	; 0x1862 <__divsf3_pse+0x70>
    1854:	9e 3f       	cpi	r25, 0xFE	; 254
    1856:	51 05       	cpc	r21, r1
    1858:	78 f0       	brcs	.+30     	; 0x1878 <__divsf3_pse+0x86>
    185a:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_inf>
    185e:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_szero>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	e4 f3       	brlt	.-8      	; 0x185e <__divsf3_pse+0x6c>
    1866:	98 3e       	cpi	r25, 0xE8	; 232
    1868:	d4 f3       	brlt	.-12     	; 0x185e <__divsf3_pse+0x6c>
    186a:	86 95       	lsr	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f7 95       	ror	r31
    1874:	9f 5f       	subi	r25, 0xFF	; 255
    1876:	c9 f7       	brne	.-14     	; 0x186a <__divsf3_pse+0x78>
    1878:	88 0f       	add	r24, r24
    187a:	91 1d       	adc	r25, r1
    187c:	96 95       	lsr	r25
    187e:	87 95       	ror	r24
    1880:	97 f9       	bld	r25, 7
    1882:	08 95       	ret
    1884:	e1 e0       	ldi	r30, 0x01	; 1
    1886:	66 0f       	add	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	bb 1f       	adc	r27, r27
    188e:	62 17       	cp	r22, r18
    1890:	73 07       	cpc	r23, r19
    1892:	84 07       	cpc	r24, r20
    1894:	ba 07       	cpc	r27, r26
    1896:	20 f0       	brcs	.+8      	; 0x18a0 <__divsf3_pse+0xae>
    1898:	62 1b       	sub	r22, r18
    189a:	73 0b       	sbc	r23, r19
    189c:	84 0b       	sbc	r24, r20
    189e:	ba 0b       	sbc	r27, r26
    18a0:	ee 1f       	adc	r30, r30
    18a2:	88 f7       	brcc	.-30     	; 0x1886 <__divsf3_pse+0x94>
    18a4:	e0 95       	com	r30
    18a6:	08 95       	ret

000018a8 <__fixunssfsi>:
    18a8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_splitA>
    18ac:	88 f0       	brcs	.+34     	; 0x18d0 <__fixunssfsi+0x28>
    18ae:	9f 57       	subi	r25, 0x7F	; 127
    18b0:	98 f0       	brcs	.+38     	; 0x18d8 <__fixunssfsi+0x30>
    18b2:	b9 2f       	mov	r27, r25
    18b4:	99 27       	eor	r25, r25
    18b6:	b7 51       	subi	r27, 0x17	; 23
    18b8:	b0 f0       	brcs	.+44     	; 0x18e6 <__fixunssfsi+0x3e>
    18ba:	e1 f0       	breq	.+56     	; 0x18f4 <__fixunssfsi+0x4c>
    18bc:	66 0f       	add	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	88 1f       	adc	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	1a f0       	brmi	.+6      	; 0x18cc <__fixunssfsi+0x24>
    18c6:	ba 95       	dec	r27
    18c8:	c9 f7       	brne	.-14     	; 0x18bc <__fixunssfsi+0x14>
    18ca:	14 c0       	rjmp	.+40     	; 0x18f4 <__fixunssfsi+0x4c>
    18cc:	b1 30       	cpi	r27, 0x01	; 1
    18ce:	91 f0       	breq	.+36     	; 0x18f4 <__fixunssfsi+0x4c>
    18d0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_zero>
    18d4:	b1 e0       	ldi	r27, 0x01	; 1
    18d6:	08 95       	ret
    18d8:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__fp_zero>
    18dc:	67 2f       	mov	r22, r23
    18de:	78 2f       	mov	r23, r24
    18e0:	88 27       	eor	r24, r24
    18e2:	b8 5f       	subi	r27, 0xF8	; 248
    18e4:	39 f0       	breq	.+14     	; 0x18f4 <__fixunssfsi+0x4c>
    18e6:	b9 3f       	cpi	r27, 0xF9	; 249
    18e8:	cc f3       	brlt	.-14     	; 0x18dc <__fixunssfsi+0x34>
    18ea:	86 95       	lsr	r24
    18ec:	77 95       	ror	r23
    18ee:	67 95       	ror	r22
    18f0:	b3 95       	inc	r27
    18f2:	d9 f7       	brne	.-10     	; 0x18ea <__fixunssfsi+0x42>
    18f4:	3e f4       	brtc	.+14     	; 0x1904 <__fixunssfsi+0x5c>
    18f6:	90 95       	com	r25
    18f8:	80 95       	com	r24
    18fa:	70 95       	com	r23
    18fc:	61 95       	neg	r22
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	8f 4f       	sbci	r24, 0xFF	; 255
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	08 95       	ret

00001906 <__floatunsisf>:
    1906:	e8 94       	clt
    1908:	09 c0       	rjmp	.+18     	; 0x191c <__floatsisf+0x12>

0000190a <__floatsisf>:
    190a:	97 fb       	bst	r25, 7
    190c:	3e f4       	brtc	.+14     	; 0x191c <__floatsisf+0x12>
    190e:	90 95       	com	r25
    1910:	80 95       	com	r24
    1912:	70 95       	com	r23
    1914:	61 95       	neg	r22
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	99 23       	and	r25, r25
    191e:	a9 f0       	breq	.+42     	; 0x194a <__floatsisf+0x40>
    1920:	f9 2f       	mov	r31, r25
    1922:	96 e9       	ldi	r25, 0x96	; 150
    1924:	bb 27       	eor	r27, r27
    1926:	93 95       	inc	r25
    1928:	f6 95       	lsr	r31
    192a:	87 95       	ror	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	b7 95       	ror	r27
    1932:	f1 11       	cpse	r31, r1
    1934:	f8 cf       	rjmp	.-16     	; 0x1926 <__floatsisf+0x1c>
    1936:	fa f4       	brpl	.+62     	; 0x1976 <__floatsisf+0x6c>
    1938:	bb 0f       	add	r27, r27
    193a:	11 f4       	brne	.+4      	; 0x1940 <__floatsisf+0x36>
    193c:	60 ff       	sbrs	r22, 0
    193e:	1b c0       	rjmp	.+54     	; 0x1976 <__floatsisf+0x6c>
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	16 c0       	rjmp	.+44     	; 0x1976 <__floatsisf+0x6c>
    194a:	88 23       	and	r24, r24
    194c:	11 f0       	breq	.+4      	; 0x1952 <__floatsisf+0x48>
    194e:	96 e9       	ldi	r25, 0x96	; 150
    1950:	11 c0       	rjmp	.+34     	; 0x1974 <__floatsisf+0x6a>
    1952:	77 23       	and	r23, r23
    1954:	21 f0       	breq	.+8      	; 0x195e <__floatsisf+0x54>
    1956:	9e e8       	ldi	r25, 0x8E	; 142
    1958:	87 2f       	mov	r24, r23
    195a:	76 2f       	mov	r23, r22
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <__floatsisf+0x5e>
    195e:	66 23       	and	r22, r22
    1960:	71 f0       	breq	.+28     	; 0x197e <__floatsisf+0x74>
    1962:	96 e8       	ldi	r25, 0x86	; 134
    1964:	86 2f       	mov	r24, r22
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	2a f0       	brmi	.+10     	; 0x1976 <__floatsisf+0x6c>
    196c:	9a 95       	dec	r25
    196e:	66 0f       	add	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	88 1f       	adc	r24, r24
    1974:	da f7       	brpl	.-10     	; 0x196c <__floatsisf+0x62>
    1976:	88 0f       	add	r24, r24
    1978:	96 95       	lsr	r25
    197a:	87 95       	ror	r24
    197c:	97 f9       	bld	r25, 7
    197e:	08 95       	ret

00001980 <__floatundisf>:
    1980:	e8 94       	clt

00001982 <__fp_di2sf>:
    1982:	f9 2f       	mov	r31, r25
    1984:	96 eb       	ldi	r25, 0xB6	; 182
    1986:	ff 23       	and	r31, r31
    1988:	81 f0       	breq	.+32     	; 0x19aa <__fp_di2sf+0x28>
    198a:	12 16       	cp	r1, r18
    198c:	13 06       	cpc	r1, r19
    198e:	14 06       	cpc	r1, r20
    1990:	44 0b       	sbc	r20, r20
    1992:	93 95       	inc	r25
    1994:	f6 95       	lsr	r31
    1996:	87 95       	ror	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	57 95       	ror	r21
    199e:	40 40       	sbci	r20, 0x00	; 0
    19a0:	ff 23       	and	r31, r31
    19a2:	b9 f7       	brne	.-18     	; 0x1992 <__fp_di2sf+0x10>
    19a4:	1b c0       	rjmp	.+54     	; 0x19dc <__fp_di2sf+0x5a>
    19a6:	99 27       	eor	r25, r25
    19a8:	08 95       	ret
    19aa:	88 23       	and	r24, r24
    19ac:	51 f4       	brne	.+20     	; 0x19c2 <__fp_di2sf+0x40>
    19ae:	98 50       	subi	r25, 0x08	; 8
    19b0:	d2 f7       	brpl	.-12     	; 0x19a6 <__fp_di2sf+0x24>
    19b2:	87 2b       	or	r24, r23
    19b4:	76 2f       	mov	r23, r22
    19b6:	65 2f       	mov	r22, r21
    19b8:	54 2f       	mov	r21, r20
    19ba:	43 2f       	mov	r20, r19
    19bc:	32 2f       	mov	r19, r18
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	b1 f3       	breq	.-20     	; 0x19ae <__fp_di2sf+0x2c>
    19c2:	12 16       	cp	r1, r18
    19c4:	13 06       	cpc	r1, r19
    19c6:	14 06       	cpc	r1, r20
    19c8:	44 0b       	sbc	r20, r20
    19ca:	88 23       	and	r24, r24
    19cc:	3a f0       	brmi	.+14     	; 0x19dc <__fp_di2sf+0x5a>
    19ce:	9a 95       	dec	r25
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	66 1f       	adc	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	ca f7       	brpl	.-14     	; 0x19ce <__fp_di2sf+0x4c>
    19dc:	55 23       	and	r21, r21
    19de:	4a f4       	brpl	.+18     	; 0x19f2 <__fp_di2sf+0x70>
    19e0:	44 0f       	add	r20, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	11 f4       	brne	.+4      	; 0x19ea <__fp_di2sf+0x68>
    19e6:	60 ff       	sbrs	r22, 0
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <__fp_di2sf+0x70>
    19ea:	6f 5f       	subi	r22, 0xFF	; 255
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	88 0f       	add	r24, r24
    19f4:	96 95       	lsr	r25
    19f6:	87 95       	ror	r24
    19f8:	97 f9       	bld	r25, 7
    19fa:	08 95       	ret

000019fc <__fp_inf>:
    19fc:	97 f9       	bld	r25, 7
    19fe:	9f 67       	ori	r25, 0x7F	; 127
    1a00:	80 e8       	ldi	r24, 0x80	; 128
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	08 95       	ret

00001a08 <__fp_nan>:
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	80 ec       	ldi	r24, 0xC0	; 192
    1a0c:	08 95       	ret

00001a0e <__fp_pscA>:
    1a0e:	00 24       	eor	r0, r0
    1a10:	0a 94       	dec	r0
    1a12:	16 16       	cp	r1, r22
    1a14:	17 06       	cpc	r1, r23
    1a16:	18 06       	cpc	r1, r24
    1a18:	09 06       	cpc	r0, r25
    1a1a:	08 95       	ret

00001a1c <__fp_pscB>:
    1a1c:	00 24       	eor	r0, r0
    1a1e:	0a 94       	dec	r0
    1a20:	12 16       	cp	r1, r18
    1a22:	13 06       	cpc	r1, r19
    1a24:	14 06       	cpc	r1, r20
    1a26:	05 06       	cpc	r0, r21
    1a28:	08 95       	ret

00001a2a <__fp_round>:
    1a2a:	09 2e       	mov	r0, r25
    1a2c:	03 94       	inc	r0
    1a2e:	00 0c       	add	r0, r0
    1a30:	11 f4       	brne	.+4      	; 0x1a36 <__fp_round+0xc>
    1a32:	88 23       	and	r24, r24
    1a34:	52 f0       	brmi	.+20     	; 0x1a4a <__fp_round+0x20>
    1a36:	bb 0f       	add	r27, r27
    1a38:	40 f4       	brcc	.+16     	; 0x1a4a <__fp_round+0x20>
    1a3a:	bf 2b       	or	r27, r31
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <__fp_round+0x18>
    1a3e:	60 ff       	sbrs	r22, 0
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <__fp_round+0x20>
    1a42:	6f 5f       	subi	r22, 0xFF	; 255
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	08 95       	ret

00001a4c <__fp_split3>:
    1a4c:	57 fd       	sbrc	r21, 7
    1a4e:	90 58       	subi	r25, 0x80	; 128
    1a50:	44 0f       	add	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	59 f0       	breq	.+22     	; 0x1a6c <__fp_splitA+0x10>
    1a56:	5f 3f       	cpi	r21, 0xFF	; 255
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <__fp_splitA+0x1a>
    1a5a:	47 95       	ror	r20

00001a5c <__fp_splitA>:
    1a5c:	88 0f       	add	r24, r24
    1a5e:	97 fb       	bst	r25, 7
    1a60:	99 1f       	adc	r25, r25
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <__fp_splitA+0x20>
    1a64:	9f 3f       	cpi	r25, 0xFF	; 255
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <__fp_splitA+0x2a>
    1a68:	87 95       	ror	r24
    1a6a:	08 95       	ret
    1a6c:	12 16       	cp	r1, r18
    1a6e:	13 06       	cpc	r1, r19
    1a70:	14 06       	cpc	r1, r20
    1a72:	55 1f       	adc	r21, r21
    1a74:	f2 cf       	rjmp	.-28     	; 0x1a5a <__fp_split3+0xe>
    1a76:	46 95       	lsr	r20
    1a78:	f1 df       	rcall	.-30     	; 0x1a5c <__fp_splitA>
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <__fp_splitA+0x30>
    1a7c:	16 16       	cp	r1, r22
    1a7e:	17 06       	cpc	r1, r23
    1a80:	18 06       	cpc	r1, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	f1 cf       	rjmp	.-30     	; 0x1a68 <__fp_splitA+0xc>
    1a86:	86 95       	lsr	r24
    1a88:	71 05       	cpc	r23, r1
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	08 94       	sec
    1a8e:	08 95       	ret

00001a90 <__fp_zero>:
    1a90:	e8 94       	clt

00001a92 <__fp_szero>:
    1a92:	bb 27       	eor	r27, r27
    1a94:	66 27       	eor	r22, r22
    1a96:	77 27       	eor	r23, r23
    1a98:	cb 01       	movw	r24, r22
    1a9a:	97 f9       	bld	r25, 7
    1a9c:	08 95       	ret

00001a9e <__mulsf3>:
    1a9e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__mulsf3x>
    1aa2:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__fp_round>
    1aa6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__fp_pscA>
    1aaa:	38 f0       	brcs	.+14     	; 0x1aba <__mulsf3+0x1c>
    1aac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_pscB>
    1ab0:	20 f0       	brcs	.+8      	; 0x1aba <__mulsf3+0x1c>
    1ab2:	95 23       	and	r25, r21
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <__mulsf3+0x1c>
    1ab6:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_inf>
    1aba:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__fp_nan>
    1abe:	11 24       	eor	r1, r1
    1ac0:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_szero>

00001ac4 <__mulsf3x>:
    1ac4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_split3>
    1ac8:	70 f3       	brcs	.-36     	; 0x1aa6 <__mulsf3+0x8>

00001aca <__mulsf3_pse>:
    1aca:	95 9f       	mul	r25, r21
    1acc:	c1 f3       	breq	.-16     	; 0x1abe <__mulsf3+0x20>
    1ace:	95 0f       	add	r25, r21
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	55 1f       	adc	r21, r21
    1ad4:	62 9f       	mul	r22, r18
    1ad6:	f0 01       	movw	r30, r0
    1ad8:	72 9f       	mul	r23, r18
    1ada:	bb 27       	eor	r27, r27
    1adc:	f0 0d       	add	r31, r0
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	63 9f       	mul	r22, r19
    1ae2:	aa 27       	eor	r26, r26
    1ae4:	f0 0d       	add	r31, r0
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	aa 1f       	adc	r26, r26
    1aea:	64 9f       	mul	r22, r20
    1aec:	66 27       	eor	r22, r22
    1aee:	b0 0d       	add	r27, r0
    1af0:	a1 1d       	adc	r26, r1
    1af2:	66 1f       	adc	r22, r22
    1af4:	82 9f       	mul	r24, r18
    1af6:	22 27       	eor	r18, r18
    1af8:	b0 0d       	add	r27, r0
    1afa:	a1 1d       	adc	r26, r1
    1afc:	62 1f       	adc	r22, r18
    1afe:	73 9f       	mul	r23, r19
    1b00:	b0 0d       	add	r27, r0
    1b02:	a1 1d       	adc	r26, r1
    1b04:	62 1f       	adc	r22, r18
    1b06:	83 9f       	mul	r24, r19
    1b08:	a0 0d       	add	r26, r0
    1b0a:	61 1d       	adc	r22, r1
    1b0c:	22 1f       	adc	r18, r18
    1b0e:	74 9f       	mul	r23, r20
    1b10:	33 27       	eor	r19, r19
    1b12:	a0 0d       	add	r26, r0
    1b14:	61 1d       	adc	r22, r1
    1b16:	23 1f       	adc	r18, r19
    1b18:	84 9f       	mul	r24, r20
    1b1a:	60 0d       	add	r22, r0
    1b1c:	21 1d       	adc	r18, r1
    1b1e:	82 2f       	mov	r24, r18
    1b20:	76 2f       	mov	r23, r22
    1b22:	6a 2f       	mov	r22, r26
    1b24:	11 24       	eor	r1, r1
    1b26:	9f 57       	subi	r25, 0x7F	; 127
    1b28:	50 40       	sbci	r21, 0x00	; 0
    1b2a:	9a f0       	brmi	.+38     	; 0x1b52 <__mulsf3_pse+0x88>
    1b2c:	f1 f0       	breq	.+60     	; 0x1b6a <__mulsf3_pse+0xa0>
    1b2e:	88 23       	and	r24, r24
    1b30:	4a f0       	brmi	.+18     	; 0x1b44 <__mulsf3_pse+0x7a>
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	bb 1f       	adc	r27, r27
    1b38:	66 1f       	adc	r22, r22
    1b3a:	77 1f       	adc	r23, r23
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	91 50       	subi	r25, 0x01	; 1
    1b40:	50 40       	sbci	r21, 0x00	; 0
    1b42:	a9 f7       	brne	.-22     	; 0x1b2e <__mulsf3_pse+0x64>
    1b44:	9e 3f       	cpi	r25, 0xFE	; 254
    1b46:	51 05       	cpc	r21, r1
    1b48:	80 f0       	brcs	.+32     	; 0x1b6a <__mulsf3_pse+0xa0>
    1b4a:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_inf>
    1b4e:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__fp_szero>
    1b52:	5f 3f       	cpi	r21, 0xFF	; 255
    1b54:	e4 f3       	brlt	.-8      	; 0x1b4e <__mulsf3_pse+0x84>
    1b56:	98 3e       	cpi	r25, 0xE8	; 232
    1b58:	d4 f3       	brlt	.-12     	; 0x1b4e <__mulsf3_pse+0x84>
    1b5a:	86 95       	lsr	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	b7 95       	ror	r27
    1b62:	f7 95       	ror	r31
    1b64:	e7 95       	ror	r30
    1b66:	9f 5f       	subi	r25, 0xFF	; 255
    1b68:	c1 f7       	brne	.-16     	; 0x1b5a <__mulsf3_pse+0x90>
    1b6a:	fe 2b       	or	r31, r30
    1b6c:	88 0f       	add	r24, r24
    1b6e:	91 1d       	adc	r25, r1
    1b70:	96 95       	lsr	r25
    1b72:	87 95       	ror	r24
    1b74:	97 f9       	bld	r25, 7
    1b76:	08 95       	ret

00001b78 <__udivmodsi4>:
    1b78:	a1 e2       	ldi	r26, 0x21	; 33
    1b7a:	1a 2e       	mov	r1, r26
    1b7c:	aa 1b       	sub	r26, r26
    1b7e:	bb 1b       	sub	r27, r27
    1b80:	fd 01       	movw	r30, r26
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <__udivmodsi4_ep>

00001b84 <__udivmodsi4_loop>:
    1b84:	aa 1f       	adc	r26, r26
    1b86:	bb 1f       	adc	r27, r27
    1b88:	ee 1f       	adc	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	a2 17       	cp	r26, r18
    1b8e:	b3 07       	cpc	r27, r19
    1b90:	e4 07       	cpc	r30, r20
    1b92:	f5 07       	cpc	r31, r21
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <__udivmodsi4_ep>
    1b96:	a2 1b       	sub	r26, r18
    1b98:	b3 0b       	sbc	r27, r19
    1b9a:	e4 0b       	sbc	r30, r20
    1b9c:	f5 0b       	sbc	r31, r21

00001b9e <__udivmodsi4_ep>:
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	1a 94       	dec	r1
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <__udivmodsi4_loop>
    1baa:	60 95       	com	r22
    1bac:	70 95       	com	r23
    1bae:	80 95       	com	r24
    1bb0:	90 95       	com	r25
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	bd 01       	movw	r22, r26
    1bb8:	cf 01       	movw	r24, r30
    1bba:	08 95       	ret

00001bbc <__tablejump2__>:
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	05 90       	lpm	r0, Z+
    1bc2:	f4 91       	lpm	r31, Z
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	09 94       	ijmp

00001bc8 <__ashrdi3>:
    1bc8:	97 fb       	bst	r25, 7
    1bca:	10 f8       	bld	r1, 0

00001bcc <__lshrdi3>:
    1bcc:	16 94       	lsr	r1
    1bce:	00 08       	sbc	r0, r0
    1bd0:	0f 93       	push	r16
    1bd2:	08 30       	cpi	r16, 0x08	; 8
    1bd4:	98 f0       	brcs	.+38     	; 0x1bfc <__lshrdi3+0x30>
    1bd6:	08 50       	subi	r16, 0x08	; 8
    1bd8:	23 2f       	mov	r18, r19
    1bda:	34 2f       	mov	r19, r20
    1bdc:	45 2f       	mov	r20, r21
    1bde:	56 2f       	mov	r21, r22
    1be0:	67 2f       	mov	r22, r23
    1be2:	78 2f       	mov	r23, r24
    1be4:	89 2f       	mov	r24, r25
    1be6:	90 2d       	mov	r25, r0
    1be8:	f4 cf       	rjmp	.-24     	; 0x1bd2 <__lshrdi3+0x6>
    1bea:	05 94       	asr	r0
    1bec:	97 95       	ror	r25
    1bee:	87 95       	ror	r24
    1bf0:	77 95       	ror	r23
    1bf2:	67 95       	ror	r22
    1bf4:	57 95       	ror	r21
    1bf6:	47 95       	ror	r20
    1bf8:	37 95       	ror	r19
    1bfa:	27 95       	ror	r18
    1bfc:	0a 95       	dec	r16
    1bfe:	aa f7       	brpl	.-22     	; 0x1bea <__lshrdi3+0x1e>
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <_exit>:
    1c04:	f8 94       	cli

00001c06 <__stop_program>:
    1c06:	ff cf       	rjmp	.-2      	; 0x1c06 <__stop_program>
